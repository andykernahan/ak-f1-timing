<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Caliburn.PresentationFramework</name>
    </assembly>
    <members>
        <member name="T:Caliburn.PresentationFramework.Actions.Action">
            <summary>
            A host for action related attached properties.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.Action.TargetProperty">
            <summary>
            A property definition representing the target of an action message.  The DataContext of the element will be set to this instance.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.Action.TargetWithoutContextProperty">
            <summary>
            A property definition representing the target of an action message.  The DataContext of the element is not set to this instance and the instances view metadata is not set.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.Action.Initialize(Caliburn.PresentationFramework.IRoutedMessageController,Caliburn.PresentationFramework.Actions.IActionFactory,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes property host.
            </summary>
            <param name="controller">The controller.</param>
            <param name="actionFactory">The action factory.</param>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.Action.SetTarget(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the target.
            </summary>
            <param name="d">The d.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.Action.GetTarget(System.Windows.DependencyObject)">
            <summary>
            Gets the target.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.Action.SetTargetWithoutContext(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the target.
            </summary>
            <param name="d">The d.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.Action.GetTargetWithoutContext(System.Windows.DependencyObject)">
            <summary>
            Gets the target.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.ActionBase">
            <summary>
            A base implementation of <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.IAction">
            <summary>
            Represents a single action.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.IAction.Matches(Caliburn.PresentationFramework.Actions.ActionMessage)">
            <summary>
            Determines whether this action matches the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.IAction.ShouldTriggerBeAvailable(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Determines how this instance affects trigger availability.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <returns>
            	<c>true</c> if this instance enables triggers; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.IAction.Execute(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.IInteractionNode,System.Object)">
            <summary>
            Executes the specified action on the specified target.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.IAction.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.IAction.Requirements">
            <summary>
            Gets the requirements.
            </summary>
            <value>The requirements.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Actions.IAction.Completed">
            <summary>
            Occurs when action has completed.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.IAction.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionBase._method">
            <summary>
            The method.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionBase._messageBinder">
            <summary>
            The binder.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionBase._filters">
            <summary>
            The filters.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionBase._requirements">
            <summary>
            The required parameters.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionBase.#ctor(Caliburn.Core.Invocation.IMethod,Caliburn.PresentationFramework.IMessageBinder,Caliburn.PresentationFramework.Filters.IFilterManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.ActionBase"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="messageBinder">The method binder.</param>
            <param name="filters">The filters.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionBase.Matches(Caliburn.PresentationFramework.Actions.ActionMessage)">
            <summary>
            Determines whether this action matches the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionBase.ShouldTriggerBeAvailable(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Determines how this instance affects trigger availability.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <returns>
            	<c>true</c> if this instance enables triggers; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionBase.Execute(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.IInteractionNode,System.Object)">
            <summary>
            Executes the specified this action on the specified target.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionBase.TryApplyRescue(Caliburn.PresentationFramework.IRoutedMessage,Caliburn.PresentationFramework.IInteractionNode,System.Exception)">
            <summary>
            Applies the rescue or fails.
            </summary>
            <param name="message">The action message.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionBase.OnCompleted">
            <summary>
            Called when completed event needs to fire.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionBase.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionBase.Requirements">
            <summary>
            Gets the requirements.
            </summary>
            <value>The requirements.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Actions.ActionBase.Completed">
            <summary>
            Occurs when action has completed.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionBase.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.ActionFactory">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Actions.IActionFactory"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.IActionFactory">
            <summary>
            A service capable of creating actions.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.IActionFactory.CreateFor(Caliburn.PresentationFramework.Actions.IActionHost)">
            <summary>
            Creates actions for the provided host.
            </summary>
            <param name="host">The host.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionFactory.#ctor(Caliburn.Core.Invocation.IMethodFactory,Caliburn.PresentationFramework.IMessageBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.ActionFactory"/> class.
            </summary>
            <param name="methodFactory">The method factory.</param>
            <param name="messageBinder">The parameter binder used by actions.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionFactory.CreateFor(Caliburn.PresentationFramework.Actions.IActionHost)">
            <summary>
            Creates actions for the provided host.
            </summary>
            <param name="host">The host.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionFactory.SelectMethods(System.Type)">
            <summary>
            Selects the methods approprate for actions.
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionFactory.CreateAction(Caliburn.PresentationFramework.Actions.IActionHost,System.Reflection.MethodInfo)">
            <summary>
            Creates the action.
            </summary>
            <param name="host">The host.</param>
            <param name="methodInfo">The method info.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionFactory.TryAddCanExecute(Caliburn.PresentationFramework.Filters.IFilterManager,Caliburn.Core.Invocation.IMethod)">
            <summary>
            Searches for a "CanExecute" method and add the Preview if found.
            </summary>
            <param name="manager">The manager.</param>
            <param name="method">The method.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.ActionHost">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Actions.IActionHost"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.IActionHost">
            <summary>
            Hosts instances of <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/> and related metadata.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.IActionHost.GetAction(Caliburn.PresentationFramework.Actions.ActionMessage)">
            <summary>
            Gets the action.
            </summary>
            <param name="message">The action message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.IActionHost.GetFilterManager(Caliburn.Core.Invocation.IMethod)">
            <summary>
            Gets the filter manager for a given method.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.IActionHost.TargetType">
            <summary>
            Gets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.IActionHost.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionHost.#ctor(System.Type,Caliburn.PresentationFramework.Actions.IActionFactory,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.ActionHost"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="factory">The factory.</param>
            <param name="serviceLocator">The container</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionHost.GetAction(Caliburn.PresentationFramework.Actions.ActionMessage)">
            <summary>
            Gets the action.
            </summary>
            <param name="message">The action message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionHost.GetFilterManager(Caliburn.Core.Invocation.IMethod)">
            <summary>
            Gets the filter manager for a given method.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionHost.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionHost.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionHost.TargetType">
            <summary>
            Gets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionHost.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.ActionMessage">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.IRoutedMessage"/> for actions.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.IRoutedMessageWithOutcome">
            <summary>
            Allows am <see cref="T:Caliburn.PresentationFramework.IMessageBinder"/> to bind return values.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.IRoutedMessage">
            <summary>
            Instances of this interface can be routed through the interacion hierarchy.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessage.Initialize(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Initializes the message for interaction with the specified node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessage.RelatesTo(System.Object)">
            <summary>
            Indicates whether this message is related to the potential target.
            </summary>
            <param name="potentialTarget">The potential target.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.IRoutedMessage.AvailabilityEffect">
            <summary>
            Gets or sets the availability effect.
            </summary>
            <value>The availability effect.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.IRoutedMessage.Source">
            <summary>
            Gets the source of the message.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.IRoutedMessage.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.IRoutedMessage.Invalidated">
            <summary>
            Occurs when the message is invalidated.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.IRoutedMessageWithOutcome.OutcomePath">
            <summary>
            Gets or sets the path to use in binding the <see cref="T:Caliburn.PresentationFramework.MessageProcessingOutcome"/>.
            </summary>
            <value>The outcome path.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.IRoutedMessageWithOutcome.DefaultOutcomeElement">
            <summary>
            Gets the default element to bind to if no outcome path is specified.
            </summary>
            <value>The default element.</value>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionMessage.ParametersProperty">
            <summary>
            Represents the parameters of an action message.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionMessage.MethodNameProperty">
            <summary>
            Represents the method name of an action message.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionMessage.OutcomePathProperty">
            <summary>
            Represents the return path of an action message.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionMessage.AvailabilityEffectProperty">
            <summary>
            Represents the availability effect of an action message.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessage"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessage.Initialize(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Initializes the message for interaction with the specified node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessage.RelatesTo(System.Object)">
            <summary>
            Indicates whether this message is related to the potential target.
            </summary>
            <param name="potentialTarget">The potential target.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessage.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessage.Equals(Caliburn.PresentationFramework.IRoutedMessage)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionMessage.MethodName">
            <summary>
            Gets or sets the name of the method.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionMessage.OutcomePath">
            <summary>
            Gets or sets the path to use in binding the return value.
            </summary>
            <value>The return path.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionMessage.DefaultOutcomeElement">
            <summary>
            Gets the default element to bind to if no return path is specified.
            </summary>
            <value>The default element.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionMessage.AvailabilityEffect">
            <summary>
            Gets or sets the availability effect.
            </summary>
            <value>The availability effect.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionMessage.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionMessage.Source">
            <summary>
            Gets the source of the message.
            </summary>
            <value>The source.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Actions.ActionMessage.Invalidated">
            <summary>
            Occurs when the message is invalidated.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.ActionMessageHandler">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.IRoutedMessageController"/> for action messages.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.IRoutedMessageHandler">
            <summary>
            Implemented by classes that handler routed messages.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessageHandler.Initialize(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Initializes this handler on the specified node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessageHandler.Unwrap">
            <summary>
            Gets the underlying object instance to which this handler routes requests.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessageHandler.Handles(Caliburn.PresentationFramework.IRoutedMessage)">
            <summary>
            Indicates whether this instance can handle the speicified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessageHandler.Process(Caliburn.PresentationFramework.IRoutedMessage,System.Object)">
            <summary>
            Processes the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">An object that provides additional context for message processing.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessageHandler.UpdateAvailability(Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Updates the availability of the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessageHandler.MakeAwareOf(Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Makes the handler aware of a specific trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageHandler.#ctor(Caliburn.PresentationFramework.Actions.IActionHost,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessageHandler"/> class.
            </summary>
            <param name="host">The host.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageHandler.Initialize(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Initializes this handler on the specified node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageHandler.Unwrap">
            <summary>
            Gets the data context value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageHandler.Handles(Caliburn.PresentationFramework.IRoutedMessage)">
            <summary>
            Determines whethyer the target can handle the specified action.
            </summary>
            <param name="message">The action details.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageHandler.Process(Caliburn.PresentationFramework.IRoutedMessage,System.Object)">
            <summary>
            Processes the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">An object that provides additional context for message processing.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageHandler.UpdateAvailability(Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Updates the availability of the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageHandler.MakeAwareOf(Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Makes the handler aware of a specific trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionMessageHandler.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.ActionMessageParser">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessage"/> for <see cref="T:Caliburn.PresentationFramework.Parsers.IMessageParser"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Parsers.MessageParserBase`1">
            <summary>
            An base implementation of <see cref="T:Caliburn.PresentationFramework.Parsers.IMessageParser"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Parsers.IMessageParser">
            <summary>
            Parses an <see cref="T:Caliburn.PresentationFramework.IRoutedMessage"/> from text.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.IMessageParser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified message text.
            </summary>
            <param name="target">The targeted UI element.</param>
            <param name="messageText">The message text.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.MessageParserBase`1.#ctor(Caliburn.PresentationFramework.IMessageBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Parsers.MessageParserBase`1"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.MessageParserBase`1.#ctor(Caliburn.PresentationFramework.IMessageBinder,System.Windows.Data.UpdateSourceTrigger)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Parsers.MessageParserBase`1"/> class.
            </summary>
            <param name="messageBinder">The message binder.</param>
            <param name="defaultTrigger">The default trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.MessageParserBase`1.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified message text.
            </summary>
            <param name="target">The targeted UI element.</param>
            <param name="messageText">The message text.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.MessageParserBase`1.SetCore(`0,System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the core value of the message.
            </summary>
            <param name="message">The message.</param>
            <param name="target">The target.</param>
            <param name="coreOfMessage">The core representation of the message.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.MessageParserBase`1.ParseHeadAndTail(System.String,`0)">
            <summary>
            Parses the root portion of the message.
            </summary>
            <param name="messageText">The message text.</param>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageParser.#ctor(Caliburn.PresentationFramework.IMessageBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessageParser"/> class.
            </summary>
            <param name="messageBinder"></param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageParser.#ctor(Caliburn.PresentationFramework.IMessageBinder,System.Windows.Data.UpdateSourceTrigger)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessageParser"/> class.
            </summary>
            <param name="messageBinder">The message binder.</param>
            <param name="defaultTrigger">The default trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageParser.ParseHeadAndTail(System.String,Caliburn.PresentationFramework.Actions.ActionMessage)">
            <summary>
            Parses the root portion of the message.
            </summary>
            <param name="messageText">The message text.</param>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageParser.SetCore(Caliburn.PresentationFramework.Actions.ActionMessage,System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the core value of the message.
            </summary>
            <param name="message">The message.</param>
            <param name="target">The target.</param>
            <param name="coreOfMessage">The core representation of the message.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.AsyncActionAttribute">
            <summary>
            Designates an action as asynchronous.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.IInitializable">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.Filters.IFilter"/> that requires initialization.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.IFilter">
            <summary>
            A filter.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.IFilter.Priority">
            <summary>
            Gets the priority used to order filters.
            </summary>
            <remarks>Higher numbers are evaluated first.</remarks>
            <value>The order.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IInitializable.Initialize(System.Type,Caliburn.Core.Metadata.IMetadataContainer,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes the filter.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="metadataContainer">The metadata container.</param>
            <param name="serviceLocator">The serviceLocator.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.IPostProcessor">
            <summary>
            A filter that is executed after something.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IPostProcessor.Execute(Caliburn.PresentationFramework.IRoutedMessage,Caliburn.PresentationFramework.IInteractionNode,Caliburn.PresentationFramework.MessageProcessingOutcome)">
            <summary>
            Executes the filter.
            </summary>
            <param name="outcome">The outcome of processing the message</param>
            <param name="message">The message.</param>
            <param name="handlingNode">The handling node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.AsyncActionAttribute.Initialize(System.Type,Caliburn.Core.Metadata.IMetadataContainer,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes the filter.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="metadataContainer">The metadata container.</param>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.AsyncActionAttribute.Execute(Caliburn.PresentationFramework.IRoutedMessage,Caliburn.PresentationFramework.IInteractionNode,Caliburn.PresentationFramework.MessageProcessingOutcome)">
            <summary>
            Executes the filter.
            </summary>
            <param name="message">The message.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="outcome">The outcome of processing the message</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.AsyncActionAttribute.BlockInteraction">
            <summary>
            Gets or sets a value indicating whether to block interaction with the trigger during asynchronous execution.
            </summary>
            <value><c>true</c> if should block; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.AsyncActionAttribute.Callback">
            <summary>
            Gets or sets the callback method.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.AsyncActionAttribute.Priority">
            <summary>
            Gets the order the filter will be evaluated in.
            </summary>
            <value>The order.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.AsynchronousAction">
            <summary>
            An asynchronous <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.AsynchronousAction.#ctor(Caliburn.Core.Invocation.IMethod,Caliburn.PresentationFramework.IMessageBinder,Caliburn.PresentationFramework.Filters.IFilterManager,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.AsynchronousAction"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="messageBinder">The method binder.</param>
            <param name="filters">The filters.</param>
            <param name="blockInteraction">if set to <c>true</c> [block interaction].</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.AsynchronousAction.Execute(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.IInteractionNode,System.Object)">
            <summary>
            Executes the specified this action on the specified target.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.AsynchronousAction.DoExecute(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.IInteractionNode,System.Object[])">
            <summary>
            Executes the core logic, specific to the action type.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.AsynchronousAction.ShouldTriggerBeAvailable(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Determines how this instance affects trigger availability.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <returns>
            	<c>true</c> if this instance enables triggers; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.AsynchronousAction.TryUpdateTrigger(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.IInteractionNode,System.Boolean)">
            <summary>
            Tries to update trigger.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="forceDisabled">if set to <c>true</c> [force disabled].</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.AsynchronousAction.CurrentTask">
            <summary>
            Gets or sets the current background task.
            </summary>
            <value>The current task.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.AsynchronousAction.BlockInteraction">
            <summary>
            Gets a value indicating whether to block intaction with the trigger during async execution.
            </summary>
            <value><c>true</c> if should block; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.ExtensionMethods">
            <summary>
            Hosts extension methods related to actions.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ExtensionMethods.HasTriggerEffects(Caliburn.PresentationFramework.Actions.IAction)">
            <summary>
            Determines whether the action has trigger effects.
            </summary>
            <param name="action">The action.</param>
            <returns>
            	<c>true</c> if has trigger effects; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.OverloadedAction">
            <summary>
            An overloaded <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.OverloadedAction"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.Matches(Caliburn.PresentationFramework.Actions.ActionMessage)">
            <summary>
            Determines whether this action matches the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.AddOverload(Caliburn.PresentationFramework.Actions.IAction)">
            <summary>
            Adds the overload.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.DetermineOverloadOrFail(Caliburn.PresentationFramework.Actions.ActionMessage)">
            <summary>
            Determines the overload or fail.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.ShouldTriggerBeAvailable(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Determines how this instance affects trigger availability.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <returns>
            	<c>true</c> if this instance enables triggers; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.Execute(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.IInteractionNode,System.Object)">
            <summary>
            Executes the specified this action on the specified target.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.OnCompleted">
            <summary>
            Called when completed event needs to fire.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.OverloadedAction.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.OverloadedAction.Requirements">
            <summary>
            Gets the requirements.
            </summary>
            <value>The requirements.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Actions.OverloadedAction.Completed">
            <summary>
            Occurs when action has completed.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.OverloadedAction.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.SynchronousAction">
            <summary>
            A synchronous <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.SynchronousAction.#ctor(Caliburn.Core.Invocation.IMethod,Caliburn.PresentationFramework.IMessageBinder,Caliburn.PresentationFramework.Filters.IFilterManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.SynchronousAction"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="messageBinder">The method binder.</param>
            <param name="filters">The filters.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.SynchronousAction.Execute(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.IInteractionNode,System.Object)">
            <summary>
            Executes the specified this action on the specified target.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication">
            <summary>
            A base class for applications based on Caliburn.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication"/> class.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            More than one instance of the <see cref="T:System.Windows.Application"/> class is created per <see cref="T:System.AppDomain"/>.
            </exception>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.OnStartup(System.Windows.StartupEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Application.Startup"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.StartupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.ShowMainWindow(System.Object)">
            <summary>
            Shows the main window based on the provided model.
            </summary>
            <param name="rootModel">The root model.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.ExecuteShutdownModel(Caliburn.PresentationFramework.ApplicationModel.ISubordinate,System.Action)">
            <summary>
            Executes the shutdown model.
            </summary>
            <param name="subordinate">The subordinate.</param>
            <param name="completed">The completed.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.CreateRootModel">
            <summary>
            Creates the root application model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.CreateContainer">
            <summary>
            Creates the container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.ConfigureCaliburn(System.Collections.Generic.IEnumerable{Caliburn.Core.ComponentInfo})">
            <summary>
            Configures Caliburn's components.
            </summary>
            <param name="components">The components.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.SelectAssemblies">
            <summary>
            Selects the assemblies which Caliburn will be able to inspect for components, views, etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.ConfigurePresentationFramework(Caliburn.PresentationFramework.PresentationFrameworkModule)">
            <summary>
            Configures the presentation framework.
            </summary>
            <param name="module">The configuration.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.BeforeStart(Caliburn.Core.CoreConfiguration)">
            <summary>
            Configures additional modules befores the starting the framework.
            </summary>
            <param name="core">The core.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.DefaultBinder">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IBinder"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.IBinder">
            <summary>
            Implemented by services that bind a view to a model.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IBinder.Bind(System.Object,System.Object,System.Object)">
            <summary>
            Binds the specified model to the view.
            </summary>
            <param name="model">The model.</param>
            <param name="view">The view.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultBinder.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator,Caliburn.PresentationFramework.Actions.IActionFactory,Caliburn.PresentationFramework.IMessageBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ApplicationModel.DefaultBinder"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <param name="actionFactory">The action factory.</param>
            <param name="messageBinder">The message binder.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultBinder.EnableMessageConventions">
            <summary>
            Enables convention-based actions.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultBinder.EnableBindingConventions">
            <summary>
            Enables convention-based bindings.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultBinder.Bind(System.Object,System.Object,System.Object)">
            <summary>
            Binds the specified model to the view.
            </summary>
            <param name="model">The model.</param>
            <param name="view">The view.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultBinder.AttachTo(System.Object,System.Object,System.Object)">
            <summary>
            Attaches the model and the view.
            </summary>
            <param name="model">The model.</param>
            <param name="view">The view.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultBinder.TryApplyConventions(System.Object,System.Object)">
            <summary>
            Applies the conventions.
            </summary>
            <param name="model">The model.</param>
            <param name="view">The view.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultBinder.ApplyMessageConventions(System.Windows.DependencyObject,System.Object)">
            <summary>
            Applies the action conventions.
            </summary>
            <param name="element">The element.</param>
            <param name="model">The model.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultBinder.GetModelType(System.Object)">
            <summary>
            Gets the type of the model.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultBinder.AttachMessage(Caliburn.PresentationFramework.Actions.IAction,System.Windows.DependencyObject)">
            <summary>
            Attaches a message to the control.
            </summary>
            <param name="action">The action.</param>
            <param name="control">The control.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultBinder.ApplyBindingConventions(System.Windows.DependencyObject,System.Object)">
            <summary>
            Applies the binding conventions.
            </summary>
            <param name="element">The element.</param>
            <param name="model">The model.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultBinder.FindControl(System.Windows.DependencyObject,System.String)">
            <summary>
            Finds the control.
            </summary>
            <param name="parent">The parent to whose children will be searched.</param>
            <param name="name">The name of the element to locate.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultBinder.TryBindHost(System.Windows.DependencyObject)">
            <summary>
            Tries the bind presenter hosts using conventions.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultBinder.TryBindPresenter(System.Windows.DependencyObject,System.String,System.Windows.Data.BindingMode)">
            <summary>
            Tries to bind presenters by convention.
            </summary>
            <param name="element">The element.</param>
            <param name="name">The name.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultBinder.TryBindContent(System.Windows.DependencyObject,System.String,System.Windows.Data.BindingMode)">
            <summary>
            Tries to bind the content to a view model.
            </summary>
            <param name="element">The element.</param>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultBinder.TryAddBinding(System.Windows.FrameworkElement,System.Windows.DependencyProperty,System.String,System.Windows.Data.BindingMode)">
            <summary>
            Tries to add a binding.
            </summary>
            <param name="element">The element.</param>
            <param name="property">The property.</param>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultBinder.CreateItemTemplate(System.Windows.Controls.ItemsControl)">
            <summary>
            Creates an item template which binds view models.
            </summary>
            <param name="itemsControl">The items control.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.DefaultViewStrategy">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IViewStrategy"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.IViewStrategy">
            <summary>
            A strategy for determining which view to use for a given model.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IViewStrategy.GetView(System.Object,System.Windows.DependencyObject,System.Object)">
            <summary>
            Gets the view for displaying the specified model.
            </summary>
            <param name="model">The model.</param>
            <param name="displayLocation">The control into which the view will be injected.</param>
            <param name="context">Some additional context used to select the proper view.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultViewStrategy.#ctor(Caliburn.Core.IAssemblySource,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ApplicationModel.DefaultViewStrategy"/> class.
            </summary>
            <param name="assemblySource">The assembly source.</param>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultViewStrategy.AddNamespaceAlias(System.String,System.String)">
            <summary>
            Allows for the explicit mapping of a model's namespace to a view's namespace. This overrides the implicit mapping.
            </summary>
            <param name="modelNamespace">The namespace that the model resides in.</param>
            <param name="viewNamespace">the namespace that the view resides in.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultViewStrategy.GetView(System.Object,System.Windows.DependencyObject,System.Object)">
            <summary>
            Gets the view for displaying the specified model.
            </summary>
            <param name="model">The model.</param>
            <param name="displayLocation">The control into which the view will be injected.</param>
            <param name="context">Some additional context used to select the proper view.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultViewStrategy.GetModelType(System.Object)">
            <summary>
            Gets the type of the model.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultViewStrategy.DetermineCacheKey(System.Type,System.String)">
            <summary>
            Determines the cache key.
            </summary>
            <param name="modelType">Type of the model.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultViewStrategy.GetOrCreateViewFromType(System.Type)">
            <summary>
            Queries the service locator for a view matching the type. If one is not found, it attempts to instantiate the type.
            If both options fail, it returns null.
            </summary>
            <param name="type">The candidate type for the view.</param>
            <returns>An instance of a view or null.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultViewStrategy.GetTypeNamesToCheck(System.Type,System.String)">
            <summary>
            Gets the type names to check for view implementations.
            </summary>
            <param name="modelType">Type of the model.</param>
            <param name="context">Some additional context used to select the proper view.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultViewStrategy.GetSingularKeywords">
            <summary>
            Gets the keywords used for namespace/type search and replace.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultViewStrategy.ReplaceWithView(System.Type,System.String)">
            <summary>
            Creates a set of possible type names based on the model type by replacing the toReplace text.
            </summary>
            <param name="modelType">Type of the model.</param>
            <param name="toReplace">To replace.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultViewStrategy.MakeInterface(System.String)">
            <summary>
            Makes a type name into an interface name.
            </summary>
            <param name="part">The part.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultViewStrategy.MakeNamespacePart(System.String)">
            <summary>
            Makes a type name part into a namespace part.
            </summary>
            <param name="part">The part.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IWindowManager"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.IWindowManager">
            <summary>
            A service that manages windows.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IWindowManager.Show(System.Object,System.Object,System.Action{Caliburn.PresentationFramework.ApplicationModel.ISubordinate,System.Action})">
            <summary>
            Shows a window for the specified model.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
            <param name="handleShutdownModel">The handle shutdown model.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IWindowManager.ShowDialog(System.Object,System.Object,System.Action{Caliburn.PresentationFramework.ApplicationModel.ISubordinate,System.Action})">
            <summary>
            Shows a modal dialog for the specified model.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
            <param name="handleShutdownModel">The handle shutdown model.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.#ctor(Caliburn.PresentationFramework.ApplicationModel.IViewStrategy,Caliburn.PresentationFramework.ApplicationModel.IBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager"/> class.
            </summary>
            <param name="viewStrategy">The view strategy.</param>
            <param name="binder">The default binder.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.ShowDialog(System.Object,System.Object,System.Action{Caliburn.PresentationFramework.ApplicationModel.ISubordinate,System.Action})">
            <summary>
            Shows the dialog.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
            <param name="handleShutdownModel">The handle shutdown model.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.Show(System.Object,System.Object,System.Action{Caliburn.PresentationFramework.ApplicationModel.ISubordinate,System.Action})">
            <summary>
            Shows a window for the specified model.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
            <param name="handleShutdownModel">The handle shutdown model.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.CreateWindow(System.Object,System.Object,System.Action{Caliburn.PresentationFramework.ApplicationModel.ISubordinate,System.Action})">
            <summary>
            Creates the window.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
            <param name="handleShutdownModel">The handle shutdown model.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.EnsureWindow(System.Object,System.Object)">
            <summary>
            Ensures the that the view is a window or provides one.
            </summary>
            <param name="model">The model.</param>
            <param name="view">The view.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.OnShutdownAttempted(Caliburn.PresentationFramework.ApplicationModel.IPresenter,System.Windows.Window,System.Action{Caliburn.PresentationFramework.ApplicationModel.ISubordinate,System.Action},System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when shutdown attempted.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="view">The view.</param>
            <param name="handleShutdownModel">The handler for the shutdown model.</param>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.ExtensionMethods">
            <summary>
            Hosts extension methods for presenter related classes.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ExtensionMethods.Open(Caliburn.PresentationFramework.ApplicationModel.IPresenterHost,Caliburn.PresentationFramework.ApplicationModel.IPresenter)">
            <summary>
            Opens the specified presenter.
            </summary>
            <param name="host">The host.</param>
            <param name="presenter">The presenter.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ExtensionMethods.Shutdown(Caliburn.PresentationFramework.ApplicationModel.IPresenterHost,Caliburn.PresentationFramework.ApplicationModel.IPresenter)">
            <summary>
            Shuts down the specified presenter.
            </summary>
            <param name="host">The manager.</param>
            <param name="presenter">The presenter.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ExtensionMethods.ShutdownCurrent(Caliburn.PresentationFramework.ApplicationModel.IPresenterManager)">
            <summary>
            Shuts down the current presenter.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ExtensionMethods.Back(Caliburn.PresentationFramework.ApplicationModel.INavigator)">
            <summary>
            Navigates back.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ExtensionMethods.Forward(Caliburn.PresentationFramework.ApplicationModel.INavigator)">
            <summary>
            Navigates forward.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ExtensionMethods.Navigate(Caliburn.PresentationFramework.ApplicationModel.INavigator,System.Action{System.Action{System.Boolean}})">
            <summary>
            Navigates using the specified action.
            </summary>
            <param name="navigator">The navigator.</param>
            <param name="function">The function.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ExtensionMethods.InsertOrUpdate``1(Caliburn.PresentationFramework.ApplicationModel.IStateManager,System.String,``0)">
            <summary>
            Inserts or updates a value in the state.
            </summary>
            <param name="state">The state.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ExtensionMethods.Get``1(Caliburn.PresentationFramework.ApplicationModel.IStateManager,System.String,``0)">
            <summary>
            Gets the value with the specified key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="state">The state.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ExtensionMethods.Show(Caliburn.PresentationFramework.ApplicationModel.IWindowManager,System.Object)">
            <summary>
            Shows the window for the model.
            </summary>
            <param name="manager">The manager.</param>
            <param name="rootModel">The root model.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ExtensionMethods.ShowDialog(Caliburn.PresentationFramework.ApplicationModel.IWindowManager,System.Object)">
            <summary>
            Shows the dialog for the model.
            </summary>
            <param name="manager">The manager.</param>
            <param name="rootModel">The root model.</param>
            <returns>The dialog result</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ExtensionMethods.Show(Caliburn.PresentationFramework.ApplicationModel.IWindowManager,System.Object,System.Object)">
            <summary>
            Shows the windwo for the model.
            </summary>
            <param name="manager">The manager.</param>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ExtensionMethods.ShowDialog(Caliburn.PresentationFramework.ApplicationModel.IWindowManager,System.Object,System.Object)">
            <summary>
            Shows the dialog for the model.
            </summary>
            <param name="manager">The manager.</param>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
            <returns>The dialog result</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.IExtendedPresenter">
            <summary>
            Implements <see cref="T:Caliburn.Core.Metadata.IMetadataContainer"/>, <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IPresenterNode"/>, <see cref="T:Caliburn.PresentationFramework.ApplicationModel.ILifecycleNotifier"/> and <see cref="T:Caliburn.PresentationFramework.IViewAware"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.IPresenterNode">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IPresenter"/> that is aware of its position within a hierarchy.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.IPresenter">
            <summary>
            The 'P' in MVP.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IPresenter.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IPresenter.CanShutdown">
            <summary>
            Determines whether this instance can shutdown.
            </summary>
            <returns>
            	<c>true</c> if this instance can shutdown; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IPresenter.Shutdown">
            <summary>
            Shuts down this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IPresenter.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IPresenter.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.IPresenter.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.IPresenterNode.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.ILifecycleNotifier">
            <summary>
            A class capable of notifying subscribers of events related to the lifecycle of an <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IPresenter"/>.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.ILifecycleNotifier.Initialized">
            <summary>
            Occurs when [initialized].
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.ILifecycleNotifier.WasShutdown">
            <summary>
            Occurs when [was shutdown].
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.ILifecycleNotifier.Activated">
            <summary>
            Occurs when [activated].
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.ILifecycleNotifier.Deactivated">
            <summary>
            Occurs when [deactivated].
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.IViewAware">
            <summary>
            Indicates the a model/presenter should be made aware of its view.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.IViewAware.ViewLoaded(System.Object,System.Object)">
            <summary>
            Called when the implementor's view is loaded.
            </summary>
            <param name="view">The view.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IExtendedPresenter.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.IExtendedPresenter.IsInitialized">
            <summary>
            Gets or sets a value indicating whether this instance is initialized.
            </summary>
            <value>
            	<c>true</c> if this instance is initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.IExtendedPresenter.IsActive">
            <summary>
            Gets or sets a value indicating whether this instance is active.
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.INavigator">
            <summary>
            A <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IPresenterManager"/> that also has basic navigation abilities.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.IPresenterManager">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IPresenter"/> capable of managing other presenters.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.IPresenterHost">
            <summary>
            Represents an <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IPresenter"/> that hosts other instances of <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IPresenter"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IPresenterHost.Open(Caliburn.PresentationFramework.ApplicationModel.IPresenter,System.Action{System.Boolean})">
            <summary>
            Opens the specified presenter.
            </summary>
            <param name="presenter">The presenter.</param>
            <param name="completed">Called when the open action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IPresenterHost.Shutdown(Caliburn.PresentationFramework.ApplicationModel.IPresenter,System.Action{System.Boolean})">
            <summary>
            Shuts down the specified presenter.
            </summary>
            <param name="presenter">The presenter.</param>
            <param name="completed">Called when the open action is finished.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.IPresenterHost.Presenters">
            <summary>
            Gets the presenters that are currently managed.
            </summary>
            <value>The presenters.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IPresenterManager.ShutdownCurrent(System.Action{System.Boolean})">
            <summary>
            Shuts down the current presenter.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.IPresenterManager.CurrentPresenter">
            <summary>
            Gets or sets the current presenter.
            </summary>
            <value>The current presenter.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.INavigator.Forward(System.Action{System.Boolean})">
            <summary>
            Navigates forward.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.INavigator.Back(System.Action{System.Boolean})">
            <summary>
            Navigates back.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.INavigator.Navigate(System.Action{System.Action{System.Boolean}},System.Action{System.Boolean})">
            <summary>
            Navigates using the specified action.
            </summary>
            <param name="function">The function.</param>
            <param name="completed">Called when navigation is completed.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.INavigator.ClearHistory">
            <summary>
            Clears the navigation history.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.INavigator.CanGoBack">
            <summary>
            Gets a value indicating whether this instance can navigate back.
            </summary>
            <value>
            	<c>true</c> if this instance can go back; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.INavigator.CanGoForward">
            <summary>
            Gets a value indicating whether this instance can navigate forward.
            </summary>
            <value>
            	<c>true</c> if this instance can go forward; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IStateManager"/> that uses isolated storage as its backing store.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.IStateManager">
            <summary>
            Describes a service capable of managing basic state values.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IStateManager.Initialize(System.String)">
            <summary>
            Initializes the backing store.
            </summary>
            <param name="stateName">Name of the state.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IStateManager.CommitChanges(System.String)">
            <summary>
            Commits the changes to the backing store.
            </summary>
            <param name="stateName">Name of the state.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IStateManager.InsertOrUpdate(System.String,System.String)">
            <summary>
            Inserts or updates a value in the state.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IStateManager.Get(System.String)">
            <summary>
            Gets the value with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IStateManager.Remove(System.String)">
            <summary>
            Removes the value with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.IStateManager.AfterStateLoad">
            <summary>
            Occurs after the state was loaded from the backing store.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.IStateManager.BeforeStateCommit">
            <summary>
            Occurs before the state is committed to the backing store.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager.Initialize(System.String)">
            <summary>
            Initializes the backing store.
            </summary>
            <param name="stateName">Name of the state.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager.CommitChanges(System.String)">
            <summary>
            Commits the changes.
            </summary>
            <param name="stateName">Name of the state.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager.InsertOrUpdate(System.String,System.String)">
            <summary>
            Inserts or updates a value in the state.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager.Get(System.String)">
            <summary>
            Gets the value with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager.Remove(System.String)">
            <summary>
            Removes the value with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager.AfterStateLoad">
            <summary>
            Occurs after the state was loaded from the backing store.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager.BeforeStateCommit">
            <summary>
            Occurs before the state is committed to the backing store.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.ISubordinate">
            <summary>
            A model that is owned by an <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IPresenter"/>.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.ISubordinate.Master">
            <summary>
            Gets the <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IPresenter"/> that owns this instance.
            </summary>
            <value>The master.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.ISubordinateComposite">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.ApplicationModel.ISubordinate"/> with one or more children.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ISubordinateComposite.GetChildren">
            <summary>
            Gets the children.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.ISupportCustomShutdown">
            <summary>
            Instances that implement this interface support custom shutdown logic through a developer defined model.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ISupportCustomShutdown.CreateShutdownModel">
            <summary>
            Creates the shutdown model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ISupportCustomShutdown.CanShutdown(Caliburn.PresentationFramework.ApplicationModel.ISubordinate)">
            <summary>
            Determines whether this instance can shutdown based on the evaluated shutdown model.
            </summary>
            <param name="shutdownModel">The shutdown model.</param>
            <returns>
            	<c>true</c> if this instance can shutdown; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.MultiPresenter">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IPresenter"/> that hosts multiple other <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IPresenter"/> without designating any one as current.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.PresenterBase">
            <summary>
            Implements common functionality used by all implementors of <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IPresenter"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ApplicationModel.PresenterBase"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.Execute(System.Object,Caliburn.PresentationFramework.IResult)">
            <summary>
            Executes the specified <see cref="T:Caliburn.PresentationFramework.IResult"/> on the <see cref="T:Caliburn.PresentationFramework.IInteractionNode"/> 
            associated with the view tied to the context.
            </summary>
            <param name="viewContext">The view context.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.Execute(Caliburn.PresentationFramework.IResult)">
            <summary>
            Executes the specified <see cref="T:Caliburn.PresentationFramework.IResult"/> on the <see cref="T:Caliburn.PresentationFramework.IInteractionNode"/>
            associated with the default view.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.Execute(System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.IResult})">
            <summary>
            Executes the specified instances of <see cref="T:Caliburn.PresentationFramework.IResult"/> on the <see cref="T:Caliburn.PresentationFramework.IInteractionNode"/> 
            associated with the default view.
            </summary>
            <param name="results">The results to execute.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.Execute(System.Object,System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.IResult})">
            <summary>
            Executes the specified instances of <see cref="T:Caliburn.PresentationFramework.IResult"/> on the <see cref="T:Caliburn.PresentationFramework.IInteractionNode"/> 
            associated with the view tied to the context.
            </summary>
            <param name="viewContext">The view context.</param>
            <param name="results">The results to execute.</param>
        </member>
        <member name="F:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.ExecuteCore">
            <summary>
            Executes the specified instances of <see cref="T:Caliburn.PresentationFramework.IResult"/> on the <see cref="T:Caliburn.PresentationFramework.IInteractionNode"/> 
            associated with the view tied to the context and <see cref="T:Caliburn.Core.Metadata.IMetadataContainer"/>.
            This delegate is provided in order to facilitate Unit Testing.  Set it to hijack
            the execution of results.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.CanShutdown">
            <summary>
            Determines whether this instance can shutdown.
            </summary>
            <returns>
            	<c>true</c> if this instance can shutdown; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.Shutdown">
            <summary>
            Shuts down this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.OnInitialize">
            <summary>
            Called when [initialize].
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.OnShutdown">
            <summary>
            Called when [shutdown].
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.OnActivate">
            <summary>
            Called when [activate].
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.OnDeactivate">
            <summary>
            Called when [deactivate].
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.CanShutdownPresenter(Caliburn.PresentationFramework.ApplicationModel.IPresenter,System.Action{System.Boolean})">
            <summary>
            Determines if the specified presenter can be shut down.
            </summary>
            <param name="presenter">The presenter.</param>
            <param name="completed">Called when the shutdown action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.ExecuteShutdownModel(Caliburn.PresentationFramework.ApplicationModel.ISubordinate,System.Action)">
            <summary>
            Inheritors should override this method if they intend to handle advanced shutdown scenarios.
            </summary>
            <param name="model">The model.</param>
            <param name="completed">Called when the shutdown model is finished executing.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.ViewLoaded(System.Object,System.Object)">
            <summary>
            Called when the presenter's view is loaded.
            </summary>
            <param name="view">The view.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.Close">
            <summary>
            Closes this instance by asking its Parent to initiate shutdown or by asking it's corresponding default view to close.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.Close(System.Nullable{System.Boolean})">
            <summary>
            Closes this instance by asking its Parent to initiate shutdown or by asking it's corresponding default view to close.
            This overload also provides an opportunity to pass a dialog result to it's corresponding default view.
            </summary>
            <param name="dialogResult">The dialog result.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.IsInitialized">
            <summary>
            Gets or sets a value indicating whether this instance is initialized.
            </summary>
            <value>
            	<c>true</c> if this instance is initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.IsActive">
            <summary>
            Gets or sets a value indicating whether this instance is active.
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.Initialized">
            <summary>
            Occurs when [initialized].
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.WasShutdown">
            <summary>
            Occurs when [was shutdown].
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.Activated">
            <summary>
            Occurs when [activated].
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.PresenterBase.Deactivated">
            <summary>
            Occurs when [deactivated].
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.MultiPresenter.CanShutdown">
            <summary>
            Determines whether this instance can shutdown.
            </summary>
            <returns>
            	<c>true</c> if this instance can shutdown; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.MultiPresenter.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.MultiPresenter.Shutdown">
            <summary>
            Shutdowns this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.MultiPresenter.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.MultiPresenter.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.MultiPresenter.Open(Caliburn.PresentationFramework.ApplicationModel.IPresenter,System.Action{System.Boolean})">
            <summary>
            Opens the specified presenter.
            </summary>
            <param name="presenter">The presenter.</param>
            <param name="completed">Called when the open action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.MultiPresenter.Shutdown(Caliburn.PresentationFramework.ApplicationModel.IPresenter,System.Action{System.Boolean})">
            <summary>
            Shuts down the specified presenter.
            </summary>
            <param name="presenter">The presenter.</param>
            <param name="completed">Called when the open action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.MultiPresenter.Caliburn#PresentationFramework#ApplicationModel#ISupportCustomShutdown#CreateShutdownModel">
            <summary>
            Creates the shutdown model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.MultiPresenter.Caliburn#PresentationFramework#ApplicationModel#ISupportCustomShutdown#CanShutdown(Caliburn.PresentationFramework.ApplicationModel.ISubordinate)">
            <summary>
            Determines whether this instance can shutdown based on the evaluated shutdown model.
            </summary>
            <param name="shutdownModel">The shutdown model.</param>
            <returns>
            	<c>true</c> if this instance can shutdown; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.MultiPresenter.FinalizeShutdown(System.Boolean,System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.ApplicationModel.IPresenter})">
            <summary>
            Finalizes the shutdown of some or all child presenters.
            </summary>
            <param name="canShutdown">if set to <c>true</c> all presenters in the Presenters collection can shutdown.</param>
            <param name="allowedToShutdown">Only the presenters which are allowed to shutdown.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.MultiPresenter.Presenters">
            <summary>
            Gets the presenters that are currently managed.
            </summary>
            <value>The presenters.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.MultiPresenterManager">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IPresenterManager"/> that tracks the state of multiple presenters.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.MultiPresenterManager.CanShutdown">
            <summary>
            Determines whether this instance can shutdown.
            </summary>
            <returns>
            	<c>true</c> if this instance can shutdown; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.MultiPresenterManager.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.MultiPresenterManager.Shutdown">
            <summary>
            Shutdowns this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.MultiPresenterManager.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.MultiPresenterManager.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.MultiPresenterManager.Open(Caliburn.PresentationFramework.ApplicationModel.IPresenter,System.Action{System.Boolean})">
            <summary>
            Opens the specified presenter.
            </summary>
            <param name="presenter">The presenter.</param>
            <param name="completed">Called when the open action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.MultiPresenterManager.ShutdownCurrent(System.Action{System.Boolean})">
            <summary>
            Shuts down the current presenter.
            </summary>
            <param name="completed">Called when the shutdown action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.MultiPresenterManager.DetermineNextPresenterToActivate(System.Int32)">
            <summary>
            Gets the next presenter to activate after another presenter is shutdown.
            </summary>
            <param name="lastIndex">The index of the previously removed presenter.</param>
            <returns>The presenter to activate or null if none.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.MultiPresenterManager.Shutdown(Caliburn.PresentationFramework.ApplicationModel.IPresenter,System.Action{System.Boolean})">
            <summary>
            Shuts down the specified presenter.
            </summary>
            <param name="presenter">The presenter.</param>
            <param name="completed">Called when the shutdown action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.MultiPresenterManager.Caliburn#PresentationFramework#ApplicationModel#ISupportCustomShutdown#CreateShutdownModel">
            <summary>
            Creates the shutdown model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.MultiPresenterManager.Caliburn#PresentationFramework#ApplicationModel#ISupportCustomShutdown#CanShutdown(Caliburn.PresentationFramework.ApplicationModel.ISubordinate)">
            <summary>
            Determines whether this instance can shutdown based on the evaluated shutdown model.
            </summary>
            <param name="shutdownModel">The shutdown model.</param>
            <returns>
            	<c>true</c> if this instance can shutdown; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.MultiPresenterManager.FinalizeShutdown(System.Boolean,System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.ApplicationModel.IPresenter})">
            <summary>
            Finalizes the shutdown of some or all child presenters.
            </summary>
            <param name="canShutdown">if set to <c>true</c> all presenters in the Presenters collection can shutdown.</param>
            <param name="allowedToShutdown">Only the presenters which are allowed to shutdown.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.MultiPresenterManager.CurrentPresenter">
            <summary>
            Gets or sets the current presenter.
            </summary>
            <value>The current presenter.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.MultiPresenterManager.Presenters">
            <summary>
            Gets the presenters that are currently managed.
            </summary>
            <value>The presenters.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.Navigator">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.ApplicationModel.INavigator"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.PresenterManager">
            <summary>
            A base implementation of <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IPresenterManager"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterManager.CanShutdown">
            <summary>
            Determines whether this instance can shutdown.
            </summary>
            <returns>
            	<c>true</c> if this instance can shutdown; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterManager.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterManager.Shutdown">
            <summary>
            Shuts down this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterManager.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterManager.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterManager.Open(Caliburn.PresentationFramework.ApplicationModel.IPresenter,System.Action{System.Boolean})">
            <summary>
            Opens the specified presenter.
            </summary>
            <param name="presenter">The presenter.</param>
            <param name="completed">Called when the open action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterManager.Shutdown(Caliburn.PresentationFramework.ApplicationModel.IPresenter,System.Action{System.Boolean})">
            <summary>
            Shuts down the specified presenter.
            </summary>
            <param name="presenter">The presenter.</param>
            <param name="completed">Called when the open action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterManager.ShutdownCurrent(System.Action{System.Boolean})">
            <summary>
            Shuts down the current presenter.
            </summary>
            <param name="completed">Called when the shutdown action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterManager.Caliburn#PresentationFramework#ApplicationModel#ISupportCustomShutdown#CreateShutdownModel">
            <summary>
            Creates the shutdown model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.PresenterManager.Caliburn#PresentationFramework#ApplicationModel#ISupportCustomShutdown#CanShutdown(Caliburn.PresentationFramework.ApplicationModel.ISubordinate)">
            <summary>
            Determines whether this instance can shutdown based on the evaluated shutdown model.
            </summary>
            <param name="shutdownModel">The shutdown model.</param>
            <returns>
            	<c>true</c> if this instance can shutdown; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.PresenterManager.Presenters">
            <summary>
            Gets the presenters that are currently managed.
            </summary>
            <value>The presenters.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.PresenterManager.CurrentPresenter">
            <summary>
            Gets or sets the current presenter.
            </summary>
            <value>The current presenter.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.Navigator.Forward(System.Action{System.Boolean})">
            <summary>
            Navigates forward.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.Navigator.Back(System.Action{System.Boolean})">
            <summary>
            Navigates back.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.Navigator.Navigate(System.Action{System.Action{System.Boolean}},System.Action{System.Boolean})">
            <summary>
            Navigates using the specified action.
            </summary>
            <param name="function">The function.</param>
            <param name="completed">Called when navigation is completed.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.Navigator.ClearHistory">
            <summary>
            Clears the navigation history.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.Navigator.Forward">
            <summary>
            Navigates forward.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.Navigator.Back">
            <summary>
            Navigates back.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.Navigator.NotifyOfPropertyChange(System.String)">
            <summary>
            Notifies subscribers of the property change.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.Navigator.RaiseChangeNotifications">
            <summary>
            Raises all related change notifications for the Navigator.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.Navigator.CanClearHistory">
            <summary>
            Gets a value indicating whether the history can be cleared.
            </summary>
            <value>
            	<c>true</c> if the history can be cleared; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.Navigator.Count">
            <summary>
            Gets the total number of actions tracked by the navigator 
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.Navigator.CurrentPosition">
            <summary>
            Gets the position of the current action
            </summary>
            <remarks>
            This is intended for display within a UI.
            </remarks>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.Navigator.CanGoBack">
            <summary>
            Gets a value indicating whether this instance can navigate back.
            </summary>
            <value>
            	<c>true</c> if this instance can go back; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.Navigator.CanGoForward">
            <summary>
            Gets a value indicating whether this instance can navigate forward.
            </summary>
            <value>
            	<c>true</c> if this instance can go forward; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.Presenter">
            <summary>
            A base implementation of <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IPresenter"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.Presenter.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.Presenter.Shutdown">
            <summary>
            Shutdowns this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.Presenter.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.Presenter.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.SubordinateContainer">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.ApplicationModel.ISubordinateComposite"/> that supports exactly one child.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.SubordinateContainer.#ctor(Caliburn.PresentationFramework.ApplicationModel.IPresenter,Caliburn.PresentationFramework.ApplicationModel.ISubordinate)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ApplicationModel.SubordinateContainer"/> class.
            </summary>
            <param name="master">The master.</param>
            <param name="child">The child.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.SubordinateContainer.GetChildren">
            <summary>
            Gets the children.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.SubordinateContainer.Master">
            <summary>
            Gets the <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IPresenter"/> that owns this instance.
            </summary>
            <value>The master.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.SubordinateContainer.Child">
            <summary>
            Gets or sets the child.
            </summary>
            <value>The child.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.SubordinateGroup">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.ApplicationModel.ISubordinateComposite"/> that has multiple children.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.BindableCollection`1">
            <summary>
            A base collection class that supports automatic UI thread marshalling.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Caliburn.PresentationFramework.IObservableCollection`1">
            <summary>
            Represents a collection that is observable.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.BindableCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.BindableCollection`1"/> class.
            </summary>
            <param name="collection">The collection from which the elements are copied.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> parameter cannot be null.
            </exception>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged"/> event with the provided arguments.
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/> event with the provided arguments.
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.RaiseCollectionChangedEventImmediately(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the collection changed event immediately.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.RaisePropertyChangedEventImmediately(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the property changed event immediately.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.SubordinateGroup.#ctor(Caliburn.PresentationFramework.ApplicationModel.IPresenter)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ApplicationModel.SubordinateGroup"/> class.
            </summary>
            <param name="master">The master.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.SubordinateGroup.GetChildren">
            <summary>
            Gets the children.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.SubordinateGroup.Master">
            <summary>
            Gets the <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IPresenter"/> that owns this instance.
            </summary>
            <value>The master.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.View">
            <summary>
            Hosts attached properties related to view models.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.View.Initialize(Caliburn.PresentationFramework.ApplicationModel.IViewStrategy,Caliburn.PresentationFramework.ApplicationModel.IBinder)">
            <summary>
            Initializes the framework with the specified view strategy.
            </summary>
            <param name="viewStrategy">The view strategy.</param>
            <param name="binder">The default binder.</param>
        </member>
        <member name="F:Caliburn.PresentationFramework.ApplicationModel.View.ModelProperty">
            <summary>
            A dependency property for attaching a model to the UI.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.View.GetModel(System.Windows.DependencyObject)">
            <summary>
            Gets the model.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.View.SetModel(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the model.
            </summary>
            <param name="d">The d.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Caliburn.PresentationFramework.ApplicationModel.View.ContextProperty">
            <summary>
            A dependency property for assigning a context to a particular portion of the UI.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.View.GetContext(System.Windows.DependencyObject)">
            <summary>
            Gets the context.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.View.SetContext(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the context.
            </summary>
            <param name="d">The d.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Caliburn.PresentationFramework.ApplicationModel.View.StrategyProperty">
            <summary>
            A dependency property for assigning an <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IViewStrategy"/> to a UI element.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.View.GetStrategy(System.Windows.DependencyObject)">
            <summary>
            Gets the <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IViewStrategy"/>.
            </summary>
            <param name="d">The d.</param>
            <returns>The strategy.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.View.SetStrategy(System.Windows.DependencyObject,Caliburn.PresentationFramework.ApplicationModel.IViewStrategy)">
            <summary>
            Sets the <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IViewStrategy"/>.
            </summary>
            <param name="d">The d.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.ViewAttribute">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IViewStrategy"/> that provides a basic lookup strategy for an attributed model.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.ViewStrategyAttribute">
            <summary>
            An attribute base class that implements <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IViewStrategy"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ViewStrategyAttribute.Matches(System.Object)">
            <summary>
            Determines whether this strategy applies in the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>true if it matches the context; false otherwise</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ViewStrategyAttribute.GetView(System.Object,System.Windows.DependencyObject,System.Object)">
            <summary>
            Gets the view for displaying the specified model.
            </summary>
            <param name="model">The model.</param>
            <param name="displayLocation">The control into which the view will be injected.</param>
            <param name="context">Some additional context used to select the proper view.</param>
            <returns>The view.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ViewAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ApplicationModel.ViewAttribute"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ViewAttribute.Matches(System.Object)">
            <summary>
            Determines whether this strategy applies in the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>
            true if it matches the context; false otherwise
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ViewAttribute.GetView(System.Object,System.Windows.DependencyObject,System.Object)">
            <summary>
            Gets the view for displaying the specified model.
            </summary>
            <param name="model">The model.</param>
            <param name="displayLocation">The control into which the view will be injected.</param>
            <param name="context">Some additional context used to select the proper view.</param>
            <returns>The view.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.ViewAttribute.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.ViewAttribute.Context">
            <summary>
            Gets or sets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Commands.AllCommand">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.Commands.ICompositeCommand"/> whose children must all be available in order to execute.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Commands.ICompositeCommand">
            <summary>
            A command that executes multiple child commands.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.ICompositeCommand.AddOrUpdateChild(Caliburn.PresentationFramework.Commands.CommandMessage,System.Boolean)">
            <summary>
            Adds or updates the child command.
            </summary>
            <param name="child">The child.</param>
            <param name="availability">if set to <c>true</c> the child can execute.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.ICompositeCommand.RemoveChild(Caliburn.PresentationFramework.Commands.CommandMessage)">
            <summary>
            Removes the child.
            </summary>
            <param name="child">The child.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.AllCommand.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.AllCommand.CanExecute">
            <summary>
            Determines whether this instance can execute.
            </summary>
            <returns>
            	<c>true</c> if this instance can execute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.AllCommand.AddOrUpdateChild(Caliburn.PresentationFramework.Commands.CommandMessage,System.Boolean)">
            <summary>
            Adds or updates the child command.
            </summary>
            <param name="child">The child.</param>
            <param name="availability">if set to <c>true</c> the child can execute.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.AllCommand.RemoveChild(Caliburn.PresentationFramework.Commands.CommandMessage)">
            <summary>
            Removes the child.
            </summary>
            <param name="child">The child.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.AllCommand.IsAvailable">
            <summary>
            Gets a value indicating whether this instance is available.
            </summary>
            <value>
            	<c>true</c> if this instance is available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Commands.AnyCommand">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.Commands.ICompositeCommand"/> that can execute when any of its children are available.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.AnyCommand.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.AnyCommand.CanExecute">
            <summary>
            Determines whether this instance can execute.
            </summary>
            <returns>
            	<c>true</c> if this instance can execute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.AnyCommand.AddOrUpdateChild(Caliburn.PresentationFramework.Commands.CommandMessage,System.Boolean)">
            <summary>
            Adds or updates the child command.
            </summary>
            <param name="child">The child.</param>
            <param name="availability">if set to <c>true</c> the child can execute.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.AnyCommand.RemoveChild(Caliburn.PresentationFramework.Commands.CommandMessage)">
            <summary>
            Removes the child.
            </summary>
            <param name="child">The child.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.AnyCommand.IsAvailable">
            <summary>
            Gets a value indicating whether this instance is available.
            </summary>
            <value>
            	<c>true</c> if this instance is available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Commands.Command">
            <summary>
            Hosts attached properties related to commands.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.Command.ParentProperty">
            <summary>
            A property representing the availability effect of a given message.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.Command.SetParent(System.Windows.DependencyObject,Caliburn.PresentationFramework.Commands.ICompositeCommand)">
            <summary>
            Sets the parent.
            </summary>
            <param name="d">The d.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.Command.GetParent(System.Windows.DependencyObject)">
            <summary>
            Gets the triggers.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Commands.CommandAttribute">
            <summary>
            Specifies a command which should be registered with the container and optionally allows customization of the executiion method.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandAttribute.CommandNameSuffix">
            <summary>
            The suffix that is removed from the class name when registering by Key with the container.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Commands.CommandAttribute"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Commands.CommandAttribute"/> class.
            </summary>
            <param name="name">The name to use when registering the command with the container.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandAttribute.GetComponentInfo(System.Type)">
            <summary>
            Registers the type with the specified container.
            </summary>
            <param name="decoratedType">The decorated type.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandAttribute.GetCommandName(System.Type)">
            <summary>
            Gets the name of the command, inferring it if no name was given.
            </summary>
            <param name="commandType">The command type.</param>
            <returns>The command name.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandAttribute.InferCommandName(System.Type)">
            <summary>
            Infers the name of the command.
            </summary>
            <param name="commandType">Type of the command.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandAttribute.ExecuteMethod">
            <summary>
            Gets or sets the method to use as the execution method of the command.
            </summary>
            <value>The execute method.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Commands.CommandMessage">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.IRoutedMessage"/> for commands.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandMessage.ParametersProperty">
            <summary>
            Represents the parameters of a command message.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandMessage.CommandProperty">
            <summary>
            Represents the command tied to the message.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandMessage.ParentCommandProperty">
            <summary>
            Represents the parent of the command.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandMessage.OutcomePathProperty">
            <summary>
            Represents the return path of an command message.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandMessage.AvailabilityEffectProperty">
            <summary>
            Represents the availability effect of an command message.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Commands.CommandMessage"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.#ctor(Caliburn.PresentationFramework.Actions.IActionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Commands.CommandMessage"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.Initialize(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Initializes the message for interaction with the specified node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.Unwrap">
            <summary>
            Gets the underlying object instance to which this handler routes requests.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.Handles(Caliburn.PresentationFramework.IRoutedMessage)">
            <summary>
            Indicates whether this instance can handle the speicified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.Process(Caliburn.PresentationFramework.IRoutedMessage,System.Object)">
            <summary>
            Processes the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">An object that provides additional context for message processing.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.UpdateAvailability(Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Updates the availability of the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.MakeAwareOf(Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Makes the handler aware of a specific trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.RelatesTo(System.Object)">
            <summary>
            Indicates whether this message is related to the potential target.
            </summary>
            <param name="potentialTarget">The potential target.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.Equals(Caliburn.PresentationFramework.IRoutedMessage)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.AddMetadata(Caliburn.Core.Metadata.IMetadata)">
            <summary>
            Adds metadata to the store.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.GetMetadata``1">
            <summary>
            Gets the metadata.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.GetMatchingMetadata``1">
            <summary>
            Gets the matching metadata.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandMessage.Command">
            <summary>
            Gets or sets the command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandMessage.ParentCommand">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Commands.CommandMessage.Completed">
            <summary>
            Occurs when the command has completed executing.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandMessage.OutcomePath">
            <summary>
            Gets or sets the path to use in binding the return value.
            </summary>
            <value>The return path.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandMessage.DefaultOutcomeElement">
            <summary>
            Gets the default element to bind to if no return path is specified.
            </summary>
            <value>The default element.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandMessage.AvailabilityEffect">
            <summary>
            Gets or sets the availability effect.
            </summary>
            <value>The availability effect.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandMessage.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandMessage.Source">
            <summary>
            Gets the source of the message.
            </summary>
            <value>The source.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Commands.CommandMessage.Invalidated">
            <summary>
            Occurs when the message is invalidated.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Commands.CommandMessageParser">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Parsers.IMessageParser"/> for commands.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessageParser.#ctor(Caliburn.PresentationFramework.IMessageBinder,Caliburn.PresentationFramework.Commands.CommandSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Commands.CommandMessageParser"/> class.
            </summary>
            <param name="messageBinder">The message binder.</param>
            <param name="commandSource">The location that the parser will use to get the command.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessageParser.#ctor(Caliburn.PresentationFramework.IMessageBinder,System.Windows.Data.UpdateSourceTrigger,Caliburn.PresentationFramework.Commands.CommandSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Commands.CommandMessageParser"/> class.
            </summary>
            <param name="messageBinder">The binder.</param>
            <param name="defaultTrigger">The default trigger.</param>
            <param name="commandSource">The location that the parser will use to get the command.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessageParser.ParseHeadAndTail(System.String,Caliburn.PresentationFramework.Commands.CommandMessage)">
            <summary>
            Parses the root portion of the message.
            </summary>
            <param name="messageText">The message text.</param>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessageParser.SetCore(Caliburn.PresentationFramework.Commands.CommandMessage,System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the core value of the message.
            </summary>
            <param name="message">The message.</param>
            <param name="target">The target.</param>
            <param name="coreOfMessage">The core representation of the message.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Commands.CommandSource">
            <summary>
            Indicates locations where a command can be found.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandSource.Resource">
            <summary>
            Looks for the command in the resources collection.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandSource.Container">
            <summary>
            Looks for the command in the DI container.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandSource.Bound">
            <summary>
            Databinds to a command using a property path.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.AutoCheckAvailabilityAttribute">
            <summary>
            A filter capable of updating trigger availability based on CommandManager notifications.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.IHandlerAware">
            <summary>
            A filter that is aware individual <see cref="T:Caliburn.PresentationFramework.IMessageTrigger"/> and <see cref="T:Caliburn.PresentationFramework.IRoutedMessageHandler"/> instances.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IHandlerAware.MakeAwareOf(Caliburn.PresentationFramework.IRoutedMessageHandler)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.IRoutedMessageHandler"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IHandlerAware.MakeAwareOf(Caliburn.PresentationFramework.IRoutedMessageHandler,Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.IMessageTrigger"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.AutoCheckAvailabilityAttribute.MakeAwareOf(Caliburn.PresentationFramework.IRoutedMessageHandler)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.IRoutedMessageHandler"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.AutoCheckAvailabilityAttribute.MakeAwareOf(Caliburn.PresentationFramework.IRoutedMessageHandler,Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.IMessageTrigger"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.AutoCheckAvailabilityAttribute.Priority">
            <summary>
            Gets the priority used to order filters.
            </summary>
            <value>The order.</value>
            <remarks>Higher numbers are evaluated first.</remarks>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.DependenciesAttribute">
            <summary>
            A filter capable of specifying the dependencies raised by an implementor of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> which can cause a trigger's availability to be re-evaluated.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.DependenciesAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.DependenciesAttribute"/> class.
            </summary>
            <param name="dependencies">The dependencies.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.DependenciesAttribute.Initialize(System.Type,Caliburn.Core.Metadata.IMetadataContainer,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes the filter.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="metadataContainer">The metadata container.</param>
            <param name="serviceLocator">The serviceLocator.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.DependenciesAttribute.MakeAwareOf(Caliburn.PresentationFramework.IRoutedMessageHandler)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.IRoutedMessageHandler"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.DependenciesAttribute.MakeAwareOf(Caliburn.PresentationFramework.IRoutedMessageHandler,Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.IMessageTrigger"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.DependenciesAttribute.Priority">
            <summary>
            Gets the priority used to order filters.
            </summary>
            <value>The order.</value>
            <remarks>Higher numbers are evaluated first.</remarks>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.DependencyObserver">
            <summary>
            Metadata which can be used to trigger availability changes in triggers based on <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.DependencyObserver.#ctor(Caliburn.PresentationFramework.IRoutedMessageHandler,System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.DependencyObserver"/> class.
            </summary>
            <param name="messageHandler">The message handler.</param>
            <param name="notifier">The notifier.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.DependencyObserver.MakeAwareOf(Caliburn.PresentationFramework.IMessageTrigger,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Makes the metadata aware of the relationship between an <see cref="T:Caliburn.PresentationFramework.IMessageTrigger"/> and its dependencies.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="dependencies">The dependencies.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.FilterManager">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Filters.IFilterManager"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.IFilterManager">
            <summary>
            Manages filters for an object.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IFilterManager.Add(Caliburn.PresentationFramework.Filters.IFilter)">
            <summary>
            Adds the specified filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IFilterManager.Combine(Caliburn.PresentationFramework.Filters.IFilterManager)">
            <summary>
            Combines the filters from the specified manager with the current instance.
            </summary>
            <param name="filterManager">The filter manager.</param>
            <returns>A new filter manager representing the filter combinations.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.IFilterManager.TriggerEffects">
            <summary>
            Gets the trigger affecting filters.
            </summary>
            <value>The trigger effects.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.IFilterManager.PreProcessors">
            <summary>
            
            Gets the filters that execute before something else.
            </summary>
            <value>The pre execute.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.IFilterManager.PostProcessors">
            <summary>
            Gets the filters that execute after something else.
            </summary>
            <value>The post execute.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.IFilterManager.HandlerAware">
            <summary>
            Gets the instance aware filters.
            </summary>
            <value>The instance aware filters.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.IFilterManager.Rescues">
            <summary>
            Gets a filter that performs a resuce.
            </summary>
            <value>The rescue.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.FilterManager.#ctor(System.Type,Caliburn.Core.Metadata.IMetadataContainer,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.FilterManager"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="metadataContainer">The metadata container.</param>
            <param name="serviceLocator">The serviceLocator.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.FilterManager.#ctor(System.Type,Caliburn.Core.Metadata.IMetadataContainer,Microsoft.Practices.ServiceLocation.IServiceLocator,System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.Filters.IPreProcessor},System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.Filters.IPreProcessor},System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.Filters.IPostProcessor},System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.Filters.IHandlerAware},System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.Filters.IRescue})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.FilterManager"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <param name="preExecute">The pre execute.</param>
            <param name="triggerEffects">The trigger effects.</param>
            <param name="postExecute">The post execute.</param>
            <param name="instanceAwareFilters">The instance aware.</param>
            <param name="rescues">The rescues</param>
            <param name="targetType">The target type.</param>
            <param name="metadataContainer">The metadatacontainer.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.FilterManager.Add(Caliburn.PresentationFramework.Filters.IFilter)">
            <summary>
            Adds the specified filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.FilterManager.Combine(Caliburn.PresentationFramework.Filters.IFilterManager)">
            <summary>
            Combines the filters from the specified manager with the current instance.
            </summary>
            <param name="filterManager">The filter manager.</param>
            <returns>A new filter manager representing the filter combinations.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.FilterManager.PreProcessors">
            <summary>
            Gets the filters that execute before something else.
            </summary>
            <value>The pre execute.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.FilterManager.TriggerEffects">
            <summary>
            Gets the trigger affecting filters.
            </summary>
            <value>The trigger effects.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.FilterManager.PostProcessors">
            <summary>
            Gets the filters that execute after something else.
            </summary>
            <value>The post execute.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.FilterManager.HandlerAware">
            <summary>
            Gets the instance aware filters.
            </summary>
            <value>The instance aware filters.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.FilterManager.Rescues">
            <summary>
            Gets a filter that performs a resuce.
            </summary>
            <value>The rescue.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.IPreProcessor">
            <summary>
            A <see cref="T:Caliburn.PresentationFramework.Filters.IFilter"/> that is executing before something.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IPreProcessor.Execute(Caliburn.PresentationFramework.IRoutedMessage,Caliburn.PresentationFramework.IInteractionNode,System.Object[])">
            <summary>
            Executes the filter.
            </summary>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
            <param name="handlingNode">The handling node.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.IPreProcessor.AffectsTriggers">
            <summary>
            Gets a value indicating whether this filter affects triggers.
            </summary>
            <value><c>true</c> if affects triggers; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.IRescue">
            <summary>
            A <see cref="T:Caliburn.PresentationFramework.Filters.IFilter"/> that performs a rescue.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IRescue.Handle(Caliburn.PresentationFramework.IRoutedMessage,Caliburn.PresentationFramework.IInteractionNode,System.Exception)">
            <summary>
            Handles an <see cref="T:System.Exception"/>.
            </summary>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="handlingNode">The handling node.</param>
            <returns>true if the exception was handled, false otherwise</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.MethodCallFilterBase">
            <summary>
            A base class for filters that make method calls.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Filters.MethodCallFilterBase._method">
            <summary>
            The method.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.MethodCallFilterBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.MethodCallFilterBase"/> class.
            </summary>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.MethodCallFilterBase.#ctor(Caliburn.Core.Invocation.IMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.MethodCallFilterBase"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.MethodCallFilterBase.Initialize(System.Type,Caliburn.Core.Metadata.IMetadataContainer,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes the filter.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="metadataContainer">The metadata container.</param>
            <param name="serviceLocator">The serviceLocator.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.MethodCallFilterBase.Priority">
            <summary>
            Gets the order the filter will be evaluated in.
            </summary>
            <value>The order.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.MethodCallFilterBase.MethodName">
            <summary>
            Gets the name of the method.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.MethodCallFilterBase.IsGetter">
            <summary>
            Indicates whether the preview method is actually a property getter.
            </summary>
            <value><c>true</c> if this instance points to a getter; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.MethodCallFilterBase.Target">
            <summary>
            Gets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.PreviewAttribute">
            <summary>
            A basic pre execution filter.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.PreviewAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.PreviewAttribute"/> class.
            </summary>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.PreviewAttribute.#ctor(Caliburn.Core.Invocation.IMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.PreviewAttribute"/> class.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.PreviewAttribute.Execute(Caliburn.PresentationFramework.IRoutedMessage,Caliburn.PresentationFramework.IInteractionNode,System.Object[])">
            <summary>
            Executes the filter.
            </summary>
            <param name="message">The message.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.PreviewAttribute.MakeAwareOf(Caliburn.PresentationFramework.IRoutedMessageHandler)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.IRoutedMessageHandler"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.PreviewAttribute.MakeAwareOf(Caliburn.PresentationFramework.IRoutedMessageHandler,Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.IMessageTrigger"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.PreviewAttribute.AffectsTriggers">
            <summary>
            Gets a value indicating whether this filter affects triggers.
            </summary>
            <value><c>true</c> if affects triggers; otherwise, <c>false</c>.</value>
            <remarks>True by default.</remarks>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.RescueAttribute">
            <summary>
            A basic rescue filter.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.RescueAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.RescueAttribute"/> class.
            </summary>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.RescueAttribute.Handle(Caliburn.PresentationFramework.IRoutedMessage,Caliburn.PresentationFramework.IInteractionNode,System.Exception)">
            <summary>
            Handles an <see cref="T:System.Exception"/>.
            </summary>
            <param name="message">The message.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="exception">The exception.</param>
            <returns>
            true if the exception was handled, false otherwise
            </returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Invocation.BatchingDispatcher">
            <summary>
            An impelementation of <see cref="T:Caliburn.Core.Invocation.IDispatcher"/> that efficiently batches updates to the UI thread.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.BatchingDispatcher.#ctor(Caliburn.Core.Threading.IThreadPool)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Invocation.DispatcherImplementation"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.BatchingDispatcher.ExecuteOnBackgroundThread(System.Action,System.Action{Caliburn.Core.Threading.BackgroundTaskCompletedEventArgs},System.Action{Caliburn.Core.Threading.BackgroundTaskProgressChangedEventArgs})">
            <summary>
            Executes code on the background thread.
            </summary>
            <param name="backgroundAction">The background action.</param>
            <param name="uiCallback">The UI callback.</param>
            <param name="progressChanged">The progress change callback.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.BatchingDispatcher.ExecuteOnUIThread(System.Action)">
            <summary>
            Executes code on the UI thread.
            </summary>
            <param name="uiAction">The UI action.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.BatchingDispatcher.BeginExecuteOnUIThread(System.Action)">
            <summary>
            Executes code on the UI thread asynchronously.
            </summary>
            <param name="uiAction">The UI action.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Invocation.DispatcherImplementation">
            <summary>
            An implementation of <see cref="T:Caliburn.Core.Invocation.IDispatcher"/> for WPF.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.DispatcherImplementation.#ctor(Caliburn.Core.Threading.IThreadPool)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Invocation.DispatcherImplementation"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.DispatcherImplementation.ExecuteOnBackgroundThread(System.Action,System.Action{Caliburn.Core.Threading.BackgroundTaskCompletedEventArgs},System.Action{Caliburn.Core.Threading.BackgroundTaskProgressChangedEventArgs})">
            <summary>
            Executes code on the background thread.
            </summary>
            <param name="backgroundAction">The background action.</param>
            <param name="uiCallback">The UI callback.</param>
            <param name="progressChanged">The progress change callback.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.DispatcherImplementation.ExecuteOnUIThread(System.Action)">
            <summary>
            Executes code on the UI thread.
            </summary>
            <param name="uiAction">The UI action.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.DispatcherImplementation.BeginExecuteOnUIThread(System.Action)">
            <summary>
            Executes code on the UI thread asynchronously.
            </summary>
            <param name="uiAction">The UI action.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy">
            <summary>
            An implemenation of <see cref="T:Caliburn.Core.Invocation.IDispatcherOperation"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy.#ctor(System.Windows.Threading.DispatcherOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy"/> class.
            </summary>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy.Abort">
            <summary>
            Aborts the operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy.Wait">
            <summary>
            Waits for the operation to complete
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy.Result">
            <summary>
            Gets the result of the operation after it has completed.
            </summary>
            <value>The result.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy.Aborted">
            <summary>
            Occurs when the operation is aborted.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy.Completed">
            <summary>
            Occurs when the operation has completed.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Metadata.ExtensionMethods">
            <summary>
            Extension methods realted to metadata.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Metadata.ExtensionMethods.GetView``1(Caliburn.Core.Metadata.IMetadataContainer,System.Object)">
            <summary>
            Gets the view from metadata.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="container">The container.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Metadata.ExtensionMethods.SetView(Caliburn.Core.Metadata.IMetadataContainer,System.Object,System.Object,System.Boolean)">
            <summary>
            Stores the view in metadata.
            </summary>
            <param name="container">The container.</param>
            <param name="view">The view.</param>
            <param name="context">The context.</param>
            <param name="useWeakReference">Indicates whether the view should be referenced weakly.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Metadata.ViewMetadata">
            <summary>
            Metadata that stores the current view over a model.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Metadata.ViewMetadata.SetView(System.Object,System.Object,System.Boolean)">
            <summary>
            Sets the view.
            </summary>
            <param name="view">The view.</param>
            <param name="context">The context</param>
            <param name="useWeakReference">if set to <c>true</c> uses a weak reference.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Metadata.ViewMetadata.GetView``1(System.Object)">
            <summary>
            Gets a strongly typed view.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Parsers.AttachedEventTriggerParser">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Parsers.ITriggerParser"/> that parses routed/attached events.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Parsers.ITriggerParser">
            <summary>
            Parses the trigger specific aspects of an <see cref="T:Caliburn.PresentationFramework.IMessageTrigger"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.ITriggerParser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified trigger text.
            </summary>
            <param name="target">The targeted ui element.</param>
            <param name="triggerText">The trigger text.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.AttachedEventTriggerParser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified trigger text.
            </summary>
            <param name="target">The targeted ui element.</param>
            <param name="triggerText">The trigger text.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.AttachedEventTriggerParser.GetRoutedEvent(System.Windows.DependencyObject,System.String)">
            <summary>
            Locates the routed event.
            </summary>
            <param name="target">The target.</param>
            <param name="triggerText">The trigger text.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.AttachedEventTriggerParser.GetSearchableAssemblies">
            <summary>
            Gets the assemblies that should be inspected for routed events.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Parsers.CommandTriggerParser">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Parsers.ITriggerParser"/> that parses command source hookups.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.CommandTriggerParser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified trigger text.
            </summary>
            <param name="target">The targeted ui element.</param>
            <param name="triggerText">The trigger text.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Parsers.EventTriggerParser">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Parsers.ITriggerParser"/> that parses standard events.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.EventTriggerParser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified trigger text.
            </summary>
            <param name="target">The targeted ui element.</param>
            <param name="triggerText">The trigger text.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Parsers.GestureTriggerParser">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Parsers.ITriggerParser"/> that parses gestures.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.GestureTriggerParser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified trigger text.
            </summary>
            <param name="target">The targeted ui element.</param>
            <param name="triggerText">The trigger text.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Parsers.IParser">
            <summary>
            Parses text into a fully functional <see cref="T:Caliburn.PresentationFramework.IMessageTrigger"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.IParser.SetDefaultMessageParser(System.String)">
            <summary>
            Sets the default message parser.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.IParser.RegisterTriggerParser(System.String,Caliburn.PresentationFramework.Parsers.ITriggerParser)">
            <summary>
            Registers a trigger parser.
            </summary>
            <param name="key">The key.</param>
            <param name="parser">The parser.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.IParser.RegisterMessageParser(System.String,Caliburn.PresentationFramework.Parsers.IMessageParser)">
            <summary>
            Registers a message parser.
            </summary>
            <param name="key">The key.</param>
            <param name="parser">The parser.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.IParser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified message text.
            </summary>
            <param name="target">The target.</param>
            <param name="messageText">The message text.</param>
            <returns>The triggers parsed from the text.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Parsers.IParser.MessageDelimiter">
            <summary>
            Gets or sets the message delimiter.
            </summary>
            <value>The message delimiter.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Parsers.Parser">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Parsers.IParser"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.Parser.#ctor(Caliburn.PresentationFramework.IRoutedMessageController)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Parsers.Parser"/> class.
            </summary>
            <param name="controller">The controller.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.Parser.SetDefaultMessageParser(System.String)">
            <summary>
            Sets the default message parser.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.Parser.RegisterTriggerParser(System.String,Caliburn.PresentationFramework.Parsers.ITriggerParser)">
            <summary>
            Registers a trigger parser.
            </summary>
            <param name="key">The key.</param>
            <param name="parser">The parser.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.Parser.RegisterMessageParser(System.String,Caliburn.PresentationFramework.Parsers.IMessageParser)">
            <summary>
            Registers a message parser.
            </summary>
            <param name="key">The key.</param>
            <param name="parser">The parser.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.Parser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified message text.
            </summary>
            <param name="target">The target.</param>
            <param name="messageText">The message text.</param>
            <returns>The triggers parsed from the text.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.Parser.ParseMessage(System.String,System.Windows.DependencyObject)">
            <summary>
            Parses an individual message.
            </summary>
            <param name="messageText">The message text.</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Parsers.Parser.MessageDelimiter">
            <summary>
            Gets or sets the message delimiter.
            </summary>
            <value>The message delimiter.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Triggers.AttachedEventMessageTrigger">
            <summary>
            A message trigger that triggers by routed/attached events.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.BaseMessageTrigger">
            <summary>
            A base class to ease the implementation of <see cref="T:Caliburn.PresentationFramework.IMessageTrigger"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.IMessageTrigger">
            <summary>
            Implementors enable various methods of triggering the sending of messages.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.IMessageTrigger.Attach(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Attaches the trigger to the interaction hierarchy.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IMessageTrigger.UpdateAvailabilty(System.Boolean)">
            <summary>
            Updates the UI to reflect the availabilty of the trigger.
            </summary>
            <param name="isAvailable">if set to <c>true</c> [is available].</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.IMessageTrigger.Node">
            <summary>
            Gets the node within the interaction hierarchy that this trigger is a part of.
            </summary>
            <value>The node.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.IMessageTrigger.Message">
            <summary>
            Gets the message that this trigger will send.
            </summary>
            <value>The message.</value>
        </member>
        <member name="F:Caliburn.PresentationFramework.BaseMessageTrigger.MessageProperty">
            <summary>
            A dependency property used to store the message sent by the trigger.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.BaseMessageTrigger.Attach(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Wires the trigger into the interaction hierarchy.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.BaseMessageTrigger.UpdateAvailabilty(System.Boolean)">
            <summary>
            Updates the UI to reflect the availabilty of the trigger.
            </summary>
            <param name="isAvailable">if set to <c>true</c> [is available].</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.BaseMessageTrigger.Node">
            <summary>
            Gets the node within the interaction hierarchy that this trigger is a part of.
            </summary>
            <value>The node.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.BaseMessageTrigger.Message">
            <summary>
            Gets the action details that this trigger will send.
            </summary>
            <value>The action details.</value>
        </member>
        <member name="F:Caliburn.PresentationFramework.Triggers.AttachedEventMessageTrigger.RoutedEventProperty">
            <summary>
            A dependency property representing the routed event's value.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.AttachedEventMessageTrigger.Attach(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Wires the trigger into the interaction hierarchy.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.AttachedEventMessageTrigger.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Triggers.AttachedEventMessageTrigger.RoutedEvent">
            <summary>
            Gets or sets the routed event.
            </summary>
            <value>The routed event.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Triggers.CommandMessageTrigger">
            <summary>
            A message trigger that triggers from command execution of an ICommandSource.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.CommandMessageTrigger.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.CommandMessageTrigger.Attach(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Wires the trigger into the interaction hierarchy.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.CommandMessageTrigger.UpdateAvailabilty(System.Boolean)">
            <summary>
            Updates the UI to reflect the availabilty of the trigger.
            </summary>
            <param name="isAvailable">if set to <c>true</c> [is available].</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.CommandMessageTrigger.System#Windows#Input#ICommand#Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.CommandMessageTrigger.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="E:Caliburn.PresentationFramework.Triggers.CommandMessageTrigger.System#Windows#Input#ICommand#CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Triggers.EventMessageTrigger">
            <summary>
            A message trigger that triggers by standard CLR events.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Triggers.EventMessageTrigger.EventNameProperty">
            <summary>
            A dependency property representing the event name's value.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.EventMessageTrigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Triggers.EventMessageTrigger"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.EventMessageTrigger.#ctor(Caliburn.Core.Invocation.IEventHandlerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Triggers.EventMessageTrigger"/> class.
            </summary>
            <param name="eventHandlerFactory">The event handler factory.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.EventMessageTrigger.Attach(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Wires the trigger into the interaction hierarchy.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.EventMessageTrigger.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Triggers.EventMessageTrigger.EventName">
            <summary>
            Gets or sets the name of the event.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger">
            <summary>
            An implentation of <see cref="T:System.Windows.Input.InputGesture"/> that enables triggers based on an <see cref="T:Caliburn.PresentationFramework.IMessageTrigger"/>.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.KeyProperty">
            <summary>
            A dependency property representing the key's value.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.ModifiersProperty">
            <summary>
            A dependency property representing the modifier's value.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.MouseActionProperty">
            <summary>
            A dependency property representing the mouse action's value.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.Attach(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Wires the trigger into the interactin hierarchy.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.UpdateAvailabilty(System.Boolean)">
            <summary>
            Updates the UI to reflect the availabilty of the trigger.
            </summary>
            <param name="isAvailable">if set to <c>true</c> [is available].</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.Modifiers">
            <summary>
            Gets or sets the modifiers.
            </summary>
            <value>The modifiers.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.MouseAction">
            <summary>
            Gets or sets the mouse action.
            </summary>
            <value>The mouse action.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand">
            <summary>
            Used to attach gestures.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand.#ctor(System.Windows.Input.InputGesture)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand"/> class.
            </summary>
            <param name="gesture">The gesture.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand.op_Equality(Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand,Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand.op_Inequality(Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand,Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand.AddTrigger(Caliburn.PresentationFramework.Triggers.GestureMessageTrigger)">
            <summary>
            Adds the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand.Gesture">
            <summary>
            Gets the gesture.
            </summary>
            <value>The gesture.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand.System#Windows#Input#ICommand#CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.AvailabilityEffect">
            <summary>
            Common implementations of <see cref="T:Caliburn.PresentationFramework.IAvailabilityEffect"/>.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.AvailabilityEffect.None">
            <summary>
            The element is not affected by changes in availability.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.AvailabilityEffect.Disable">
            <summary>
            This effect can disable the UI.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.AvailabilityEffect.Hide">
            <summary>
            This effect can hide the UI.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.AvailabilityEffect.Collapse">
            <summary>
            This effect can collapse the UI.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.AvailabilityEffect.NoneEffect">
            <summary>
            The element is not affected by changes in availability.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.IAvailabilityEffect">
            <summary>
            Describes how a UI is affected by the availability of a message.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.IAvailabilityEffect.ApplyTo(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Applies the effect to the target.
            </summary>
            <param name="target">The element.</param>
            <param name="isAvailable">Determines how the effect will be applied to the target.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.AvailabilityEffect.NoneEffect.ApplyTo(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Applies the effect to the target.
            </summary>
            <param name="target">The element.</param>
            <param name="isAvailable">Determines how the effect will be applied to the target.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.AvailabilityEffect.DisableEffect">
            <summary>
            This effect can disable the UI.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.AvailabilityEffect.DisableEffect.ApplyTo(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Applies the effect to the target.
            </summary>
            <param name="target">The element.</param>
            <param name="isAvailable">Determines how the effect will be applied to the target.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.AvailabilityEffect.HideEffect">
            <summary>
            This effect can hide the UI.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.AvailabilityEffect.HideEffect.ApplyTo(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Applies the effect to the target.
            </summary>
            <param name="target">The element.</param>
            <param name="isAvailable">Determines how the effect will be applied to the target.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.AvailabilityEffect.CollapseEffect">
            <summary>
            This effect can collapse the UI.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.AvailabilityEffect.CollapseEffect.ApplyTo(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Applies the effect to the target.
            </summary>
            <param name="target">The element.</param>
            <param name="isAvailable">Determines how the effect will be applied to the target.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.AvailabilityEffectConverter">
            <summary>
            A <see cref="T:System.ComponentModel.TypeConverter"/> capable of converting strings to <see cref="T:Caliburn.PresentationFramework.IAvailabilityEffect"/> instances.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.AvailabilityEffectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.AvailabilityEffectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="T:Caliburn.PresentationFramework.CancelResult">
            <summary>
            Used by a child to cancel the enumeration of <see cref="T:Caliburn.PresentationFramework.IResult"/> instaces.  
            This will not bubble up to the caller as an exception, but will simply halt enumeration.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.DefaultResult">
            <summary>
            The default behavior for handling return values of bound methods.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.IResult">
            <summary>
            Allows custom code to execute after the return of a method.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.IResult.Execute(Caliburn.PresentationFramework.IRoutedMessageWithOutcome,Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Executes the custom code.
            </summary>
            <param name="message">The message.</param>
            <param name="handlingNode">The handling node.</param>
        </member>
        <member name="E:Caliburn.PresentationFramework.IResult.Completed">
            <summary>
            Occurs when execution has completed.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.DefaultResult.#ctor(Caliburn.PresentationFramework.IRoutedMessageController,Caliburn.PresentationFramework.MessageProcessingOutcome)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.DefaultResult"/> class.
            </summary>
            <param name="routedMessageController">The routed message controller.</param>
            <param name="outcome">The outcome of processing the message.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.DefaultResult.Execute(Caliburn.PresentationFramework.IRoutedMessageWithOutcome,Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Executes the custom code.
            </summary>
            <param name="message">The message.</param>
            <param name="handlingNode">The handling node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.DefaultResult.CreateSetter(System.Object,System.String[])">
            <summary>
            Finds the property setter.
            </summary>
            <param name="target">The target.</param>
            <param name="propertyPath">The property path.</param>
            <returns></returns>
        </member>
        <member name="E:Caliburn.PresentationFramework.DefaultResult.Completed">
            <summary>
            Occurs when execution has completed.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ExtensionMethods">
            <summary>
            Extension methods related to the PresentationFramework classes.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ExtensionMethods.GetResource``1(System.Windows.FrameworkElement,System.Object)">
            <summary>
            Gets the resource by searching the hierarchy of of elements.
            </summary>
            <typeparam name="T">The type of resource.</typeparam>
            <param name="element">The element.</param>
            <param name="key">The key.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ExtensionMethods.GetResource``1(System.Windows.FrameworkContentElement,System.Object)">
            <summary>
            Gets the resource by searching the hierarchy of of elements.
            </summary>
            <typeparam name="T">The type of resource.</typeparam>
            <param name="element">The element.</param>
            <param name="key">The key.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ExtensionMethods.WithPresentationFramework(Caliburn.Core.IConfigurationHook)">
            <summary>
            Adds the routed UI messaging module's configuration to the system.
            </summary>
            <param name="hook">The hook.</param>
            <returns>The configuration.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ExtensionMethods.FindDefaultsOrFail(Caliburn.PresentationFramework.IRoutedMessageController,System.Object)">
            <summary>
            Finds the interaction defaults or fail.
            </summary>
            <param name="controller">The controller.</param>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ExtensionMethods.FindName``1(System.Windows.FrameworkElement,System.String,System.Boolean)">
            <summary>
            Finds an element by name or fails.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element">The element.</param>
            <param name="name">The name.</param>
            <param name="shouldFail">Indicates whether an exception should be throw if the named item is not found.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ExtensionMethods.FindNameOrFail``1(System.Windows.FrameworkContentElement,System.String)">
            <summary>
            Finds an element by name or fails.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element">The element.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.GenericInteractionDefaults`1">
            <summary>
            An implamentation of <see cref="T:Caliburn.PresentationFramework.InteractionDefaults"/>.
            </summary>
            <typeparam name="T">The type of element these defaults apply to.</typeparam>
        </member>
        <member name="T:Caliburn.PresentationFramework.InteractionDefaults">
            <summary>
            Enables default functionality for UI-related elements.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.InteractionDefaults.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.InteractionDefaults"/> class.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="defaultEventName">Name of the default event.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.InteractionDefaults.GetDefaultTrigger">
            <summary>
            Gets the default trigger.
            </summary>
            <value>The default trigger.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.InteractionDefaults.GetDefaultValue(System.Object)">
            <summary>
            Gets the default value from the target.
            </summary>
            <param name="target">The target object.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.InteractionDefaults.SetDefaultValue(System.Object,System.Object)">
            <summary>
            Sets the default value on the target.
            </summary>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.InteractionDefaults.ElementType">
            <summary>
            Gets the type of the element to which the defaults apply.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.InteractionDefaults.DefaultEventName">
            <summary>
            Gets the name of the default event used for UI wireup.
            </summary>
            <value>The event name.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.GenericInteractionDefaults`1.#ctor(Caliburn.Core.Invocation.IEventHandlerFactory,System.String,System.Action{`0,System.Object},System.Func{`0,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.GenericInteractionDefaults`1"/> class.
            </summary>
            <param name="eventHandlerFactory">The event handler factory.</param>
            <param name="defaultEventName">Default name of the event.</param>
            <param name="setter">The setter.</param>
            <param name="getter">The getter.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.GenericInteractionDefaults`1.#ctor(System.String,System.Action{`0,System.Object},System.Func{`0,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.GenericInteractionDefaults`1"/> class.
            </summary>
            <param name="defaultEventName">Default name of the event.</param>
            <param name="setter">The setter.</param>
            <param name="getter">The getter.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.GenericInteractionDefaults`1.GetDefaultTrigger">
            <summary>
            Gets the default trigger.
            </summary>
            <returns></returns>
            <value>The default trigger.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.GenericInteractionDefaults`1.GetDefaultValue(System.Object)">
            <summary>
            Gets the default value from the target.
            </summary>
            <param name="target">The target object.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.GenericInteractionDefaults`1.SetDefaultValue(System.Object,System.Object)">
            <summary>
            Sets the default value on the target.
            </summary>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.IInteractionNode">
            <summary>
            Represents a node within the interaction hierarchy.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.IInteractionNode.FindParent">
            <summary>
            Finds the parent of this node.
            </summary>
            <returns>The parent or null if not found.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.IInteractionNode.Handles(Caliburn.PresentationFramework.IRoutedMessage)">
            <summary>
            Determines whether this node can handle the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.IInteractionNode.ProcessMessage(Caliburn.PresentationFramework.IRoutedMessage,System.Object)">
            <summary>
            Processes the message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">An object that provides additional context for message processing.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IInteractionNode.UpdateAvailability(Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Updates the availability of the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IInteractionNode.RegisterHandler(Caliburn.PresentationFramework.IRoutedMessageHandler)">
            <summary>
            Sets the message handler for this node.
            </summary>
            <param name="messageHandler">The message handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IInteractionNode.AddTrigger(Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Adds the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.IInteractionNode.MessageHandler">
            <summary>
            Gets the message target.
            </summary>
            <value>The action target.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.IInteractionNode.Triggers">
            <summary>
            Gets the triggers.
            </summary>
            <value>The triggers.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.IInteractionNode.UIElement">
            <summary>
            Gets the UI element.
            </summary>
            <value>The UI element.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.IMessageBinder">
            <summary>
            A service that is capable of properly binding values to a methods parameters and return.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.IMessageBinder.IsSpecialValue(System.String)">
            <summary>
            Determines whether the supplied value is recognized as a specialy treated value.
            </summary>
            <param name="potential">The potential value.</param>
            <returns>
            	<c>true</c> if a special value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.IMessageBinder.AddValueHandler(System.String,System.Func{Caliburn.PresentationFramework.IInteractionNode,System.Object,System.Object})">
            <summary>
            Identifies a special value along with its handler.
            </summary>
            <param name="specialValue">The special value.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IMessageBinder.DetermineParameters(Caliburn.PresentationFramework.IRoutedMessage,System.Collections.Generic.IList{Caliburn.PresentationFramework.RequiredParameter},Caliburn.PresentationFramework.IInteractionNode,System.Object)">
            <summary>
            Determines the parameters that a method should be invoked with.
            </summary>
            <param name="message">The message to determine the parameters for.</param>
            <param name="requiredParameters">The requirements for method binding.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="context">The context.</param>
            <returns>The actual parameters</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.IMessageBinder.CreateResult(Caliburn.PresentationFramework.MessageProcessingOutcome)">
            <summary>
            Binds the return value to the UI.
            </summary>
            <param name="outcome">The outcome of processing the message.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.InteractionNode">
            <summary>
            Represents a node within the interaction hierarchy.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.InteractionNode.#ctor(System.Windows.DependencyObject,Caliburn.PresentationFramework.IRoutedMessageController)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.InteractionNode"/> class.
            </summary>
            <param name="uiElement">The UI element.</param>
            <param name="controller">The routed message controller.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.InteractionNode.FindParent">
            <summary>
            Finds the parent of this node.
            </summary>
            <returns>The parent or null if not found.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.InteractionNode.Handles(Caliburn.PresentationFramework.IRoutedMessage)">
            <summary>
            Determines whether this node can handle the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.InteractionNode.ProcessMessage(Caliburn.PresentationFramework.IRoutedMessage,System.Object)">
            <summary>
            Processes the message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">An object that provides additional context for message processing.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.InteractionNode.UpdateAvailability(Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Updates the availability of the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.InteractionNode.RegisterHandler(Caliburn.PresentationFramework.IRoutedMessageHandler)">
            <summary>
            Sets the message handler for this node.
            </summary>
            <param name="messageHandler">The message handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.InteractionNode.AddTrigger(Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Adds the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.InteractionNode.MessageHandler">
            <summary>
            Gets the action target.
            </summary>
            <value>The action target.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.InteractionNode.Triggers">
            <summary>
            Gets the triggers.
            </summary>
            <value>The triggers.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.InteractionNode.UIElement">
            <summary>
            Gets the UI element.
            </summary>
            <value>The UI element.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.IRoutedMessageController">
            <summary>
            A service that manages all aspects of Caliburn's routed message mechanism.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessageController.AddHandler(System.Windows.DependencyObject,Caliburn.PresentationFramework.IRoutedMessageHandler,System.Boolean)">
            <summary>
            Adds a message handler at the specified location in the UI hierarchy.
            </summary>
            <param name="uiElement">The UI element.</param>
            <param name="handler">The message handler.</param>
            <param name="setContext">if set to <c>true</c> the handler will also be stored in the element's DataContext.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessageController.AttachTrigger(System.Windows.DependencyObject,Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Attaches the trigger to the UI and prepares it to send messages.
            </summary>
            <param name="uiElement">The UI element.</param>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessageController.GetParent(System.Windows.DependencyObject)">
            <summary>
            Gets the parent.
            </summary>
            <param name="uiElement">The UI element to retrieve the parent for.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessageController.SetupDefaults(Caliburn.PresentationFramework.InteractionDefaults[])">
            <summary>
            Sets up the defaults for interaction with an element.
            </summary>
            <param name="interactionDefaults">The defaults.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessageController.GetInteractionDefaults(System.Type)">
            <summary>
            Gets the interaction defaults.
            </summary>
            <param name="elementType">The type.</param>
            <returns>The defaults.</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Message">
            <summary>
            Hosts attached properties related to routed UI messaging.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Message.TriggersProperty">
            <summary>
            A property definition representing a collection of triggers.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Message.AttachProperty">
            <summary>
            A property definition representing a single trigger/message attachment.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Message.AvailabilityEffectProperty">
            <summary>
            A property representing the availability effect of a given message.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Message.Initialize(Caliburn.PresentationFramework.IRoutedMessageController,Caliburn.PresentationFramework.Parsers.IParser)">
            <summary>
            Initializes the message property host.
            </summary>
            <param name="controller">The controller.</param>
            <param name="parser">The parser.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Message.SetTriggers(System.Windows.DependencyObject,Caliburn.PresentationFramework.RoutedMessageTriggerCollection)">
            <summary>
            Sets the triggers.
            </summary>
            <param name="d">The d.</param>
            <param name="triggers">The triggers.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Message.GetTriggers(System.Windows.DependencyObject)">
            <summary>
            Gets the triggers.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Message.SetAttach(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the attached trigger/message.
            </summary>
            <param name="d">The d.</param>
            <param name="attachText">The attach text.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Message.GetAttach(System.Windows.DependencyObject)">
            <summary>
            Gets the attached trigger/message.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Message.SetAvailabilityEffect(System.Windows.DependencyObject,Caliburn.PresentationFramework.IAvailabilityEffect)">
            <summary>
            Sets the availability effect.
            </summary>
            <param name="d">The d.</param>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Message.GetAvailabilityEffect(System.Windows.DependencyObject)">
            <summary>
            Gets the availability effect.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.MessageBinder">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.IMessageBinder"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.MessageBinder.#ctor(Caliburn.PresentationFramework.IRoutedMessageController)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.MessageBinder"/> class.
            </summary>
            <param name="routedMessageController">The routed message controller.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.MessageBinder.IsSpecialValue(System.String)">
            <summary>
            Determines whether the supplied value is recognized as a specialy treated value.
            </summary>
            <param name="potential">The potential value.</param>
            <returns>
            	<c>true</c> if a special value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.MessageBinder.AddValueHandler(System.String,System.Func{Caliburn.PresentationFramework.IInteractionNode,System.Object,System.Object})">
            <summary>
            Identifies a special value along with its handler.
            </summary>
            <param name="specialValue">The special value.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.MessageBinder.DetermineParameters(Caliburn.PresentationFramework.IRoutedMessage,System.Collections.Generic.IList{Caliburn.PresentationFramework.RequiredParameter},Caliburn.PresentationFramework.IInteractionNode,System.Object)">
            <summary>
            Determines the parameters that a method should be invoked with.
            </summary>
            <param name="message">The message to determine the parameters for.</param>
            <param name="requiredParameters">The requirements for method binding.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="context">The context.</param>
            <returns>The actual parameters</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.MessageBinder.CreateResult(Caliburn.PresentationFramework.MessageProcessingOutcome)">
            <summary>
            Binds the return value to the UI.
            </summary>
            <param name="outcome">The outcome or processing the message.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.MessageBinder.LocateAndCoerceValues(System.Collections.Generic.IList{Caliburn.PresentationFramework.RequiredParameter},Caliburn.PresentationFramework.IInteractionNode,Caliburn.PresentationFramework.IInteractionNode,System.Object)">
            <summary>
            Locates and perofrms type coercion for the required parameters.
            </summary>
            <param name="requiredParameters">The required parameters.</param>
            <param name="sourceNode">The source node.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.MessageBinder.CoerceValues(System.Collections.Generic.IList{Caliburn.PresentationFramework.RequiredParameter},System.Object[],Caliburn.PresentationFramework.IInteractionNode,System.Object)">
            <summary>
            Coerces the values.
            </summary>
            <param name="requiredParameters">The required parameters.</param>
            <param name="providedValues">The provided values.</param>
            <param name="sourceNode">The source node.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.MessageBinder.DetermineSpecialValue(System.String,Caliburn.PresentationFramework.IInteractionNode,System.Object,System.Object@)">
            <summary>
            Determines if the key is a special value.
            </summary>
            <param name="possibleKey">The possible key.</param>
            <param name="sourceNode">The source node.</param>
            <param name="context">The context.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.MessageBinder.ResolveSpecialValue(System.String,Caliburn.PresentationFramework.IInteractionNode,System.Object)">
            <summary>
            Resolves the special value.
            </summary>
            <param name="potential">The possible special value.</param>
            <param name="sourceNode">The source node.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.MessageBinder.CoerceParameter(Caliburn.PresentationFramework.RequiredParameter,System.Object)">
            <summary>
            Coerces the parameter.
            </summary>
            <param name="parameter">The required parameter.</param>
            <param name="providedValue">The provided value.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.MessageBinder.CoerceValueCore(System.Type,System.Object)">
            <summary>
            Coerces the provided value to the destination type.
            </summary>
            <param name="destinationType">The destination type.</param>
            <param name="providedValue">The provided value.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.MessageBinder.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for a type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.MessageBinder.InitializeDefaultValueHandlers">
            <summary>
            Creates the default value handlers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.MessageBinder.CreateGetter(System.Object,System.String[])">
            <summary>
            Finds the property setter.
            </summary>
            <param name="target">The target.</param>
            <param name="propertyPath">The property path.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.MessageProcessingOutcome">
            <summary>
            The outcome of processing a message.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.MessageProcessingOutcome.#ctor(System.Object,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.MessageProcessingOutcome"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="resultType">Type of the result.</param>
            <param name="wasCancelled">if set to <c>true</c> [was cancelled].</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.MessageProcessingOutcome.WasCancelled">
            <summary>
            Gets or sets a value indicating whether message processing was cancelled.
            </summary>
            <value><c>true</c> if cancelled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.MessageProcessingOutcome.ResultType">
            <summary>
            Gets or sets the type of the result.
            </summary>
            <value>The type of the result.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.MessageProcessingOutcome.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Parameter">
            <summary>
            Represents a parameter of a message.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Parameter.ValueProperty">
            <summary>
            A dependency property representing the parameter's value.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Parameter"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parameter.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Parameter"/> class.
            </summary>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parameter.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Parameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
            <value>The value.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Parameter.ValueChanged">
            <summary>
            Occurs when [value changed].
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.PresentationFrameworkModule">
            <summary>
            The configuration for the routed UI messaging mechanism.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.PresentationFrameworkModule.#ctor(Caliburn.Core.IConfigurationHook)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.PresentationFrameworkModule"/> class.
            </summary>
            <param name="hook">The hook.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.PresentationFrameworkModule.UsingRoutedMessageController``1">
            <summary>
            Customizes the routed message controller used by Caliburn.
            </summary>
            <typeparam name="T">The routed message controller type.</typeparam>
            <returns>The configuration.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.PresentationFrameworkModule.UsingMessageBinder``1">
            <summary>
            Customizes the method binder used by Caliburn.
            </summary>
            <typeparam name="T">The method binder type.</typeparam>
            <returns>The configuration.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.PresentationFrameworkModule.UsingParser``1">
            <summary>
            Customizes the message parser used by Caliburn.
            </summary>
            <typeparam name="T">The message parser type.</typeparam>
            <returns>The configuration.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.PresentationFrameworkModule.UsingDispatcher``1">
            <summary>
            Customizes the dispatcher implementation.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.PresentationFrameworkModule.UsingActionFactory``1">
            <summary>
            Customizes the action factory used by Caliburn.
            </summary>
            <typeparam name="T">The action factory type.</typeparam>
            <returns>The configuration.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.PresentationFrameworkModule.UsingViewStrategy``1">
            <summary>
            Customizes the view strategy used by Caliburn.
            </summary>
            <typeparam name="T">The view strategy type.</typeparam>
            <returns>The configuration.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.PresentationFrameworkModule.UsingBinder``1">
            <summary>
            Customizes the binder used by Caliburn.
            </summary>
            <typeparam name="T">The binder type.</typeparam>
            <returns>The configuration.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.PresentationFrameworkModule.UsingWindowManager``1">
            <summary>
            Customizes the window manager used by Caliburn.
            </summary>
            <typeparam name="T">The window manager type.</typeparam>
            <returns>The configuration.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.PresentationFrameworkModule.GetComponents">
            <summary>
            Gets the component information for this module.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.PresentationFrameworkModule.Initialize">
            <summary>
            Initializes this module.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.PresentationFrameworkModule.SetupDefaultInteractions">
            <summary>
            Sets up the default interactions.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.PresentationFrameworkModule.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Caliburn.PresentationFramework.PresentationFrameworkModule.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.PresentationFrameworkModule.IsInDesignMode">
            <summary>
            Gets a value indicating whether the framework is in design mode.
            </summary>
            <value>
            	<c>true</c> if the framework is in design mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Caliburn.PresentationFramework.RequiredParameter">
            <summary>
            Represents a parameter that is required for message binding.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RequiredParameter.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.RequiredParameter"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.RequiredParameter.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.RequiredParameter.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ResolveExtension">
            <summary>
            A Markup Extension that enables type resolution through the DI container in XAML.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ResolveExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ResolveExtension"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ResolveExtension.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ResolveExtension"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ResolveExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">Object that can provide services for the markup extension.</param>
            <returns>
            The object value to set on the property where the extension is applied.
            </returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.ResolveExtension.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ResolveExtension.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ResolveExtension.DesignTimeValue">
            <summary>
            Gets or sets the design time value.
            </summary>
            <value>The design time value.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessageController">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.IRoutedMessageController"/>.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.RoutedMessageController.NodeProperty">
            <summary>
            Used to maintain the state of the interaction hierarchy.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessageController.AddHandler(System.Windows.DependencyObject,Caliburn.PresentationFramework.IRoutedMessageHandler,System.Boolean)">
            <summary>
            Adds a message handler at the specified location in the UI hierarchy.
            </summary>
            <param name="uiElement">The UI element.</param>
            <param name="handler">The message handler.</param>
            <param name="setContext">if set to <c>true</c> the handler will also be stored in the element's DataContext and ViewMetadata will be set.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessageController.AttachTrigger(System.Windows.DependencyObject,Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Attaches the trigger and prepares it to send actions.
            </summary>
            <param name="uiElement">The UI element.</param>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessageController.GetParent(System.Windows.DependencyObject)">
            <summary>
            Gets the parent.
            </summary>
            <param name="uiElement">The UI element to retrieve the parent for.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessageController.SetupDefaults(Caliburn.PresentationFramework.InteractionDefaults[])">
            <summary>
            Sets up the defaults for interaction with an element.
            </summary>
            <param name="interactionDefaults">The defaults.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessageController.GetInteractionDefaults(System.Type)">
            <summary>
            Gets the interaction defaults.
            </summary>
            <param name="elementType">The type.</param>
            <returns>The defaults.</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessageTriggerCollection">
            <summary>
            A collection of triggers for routing messages through the UI.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessageTriggerCollection.CreateInstanceCore">
            <summary>
            Creates a new instance of the <see cref="T:System.Windows.FreezableCollection`1"/>.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.SequentialResult">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.IResult"/> that enables execution of multiple results.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.SequentialResult.#ctor(System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.IResult})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.SequentialResult"/> class.
            </summary>
            <param name="children">The children.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.SequentialResult.Execute(Caliburn.PresentationFramework.IRoutedMessageWithOutcome,Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Executes the custom code.
            </summary>
            <param name="message">The message.</param>
            <param name="handlingNode">The handling node.</param>
        </member>
        <member name="E:Caliburn.PresentationFramework.SequentialResult.Completed">
            <summary>
            Occurs when execution has completed.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.SequentialResult.Children">
            <summary>
            Gets the children.
            </summary>
            <value>The children.</value>
        </member>
    </members>
</doc>
