<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"        
    xmlns:Controls="clr-namespace:AK.F1.Timing.UI.Controls"
    xmlns:Converters="clr-namespace:AK.F1.Timing.UI.Converters">

    <Converters:CollapsedWhenNullConverter x:Key="CollapsedWhenNullConverter"/>
    <Converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

    <Style x:Key="Border" TargetType="{x:Type Border}">
        <Setter Property="CornerRadius" Value="3"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="BorderThickness" Value="3"/>
        <Setter Property="BorderBrush" Value="{StaticResource NormalBrush}"/>
    </Style>

    <Style TargetType="{x:Type Window}" x:Key="WindowStyle">
        <Setter Property="Height" Value="525"/>
        <Setter Property="Width" Value="800"/>
        <Setter Property="WindowStyle" Value="None"/>        
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="AllowsTransparency" Value="True"/>
    </Style>

    <Style BasedOn="{StaticResource Border}" TargetType="{x:Type Border}" x:Key="WindowBodyStyle">        
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Background" Value="{StaticResource ControlBackgroundBrush}"/>
    </Style>
    
    <Style TargetType="{x:Type Border}" x:Key="WindowHeaderStyle">        
        <Setter Property="Background" Value="{StaticResource NormalBrush}"/>
    </Style>
    
    <Style TargetType="{x:Type Button}" x:Key="ExitWindowButton">

    </Style>

    <!--<Style BasedOn="{StaticResource {x:Type TabControl}}" TargetType="{x:Type TabControl}">
        <Setter Property="Background" Value="{StaticResource NormalBrush}"/>
    </Style>-->

    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
    </Style>

    <Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="{x:Type TextBlock}" x:Key="FieldLabel">
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style BasedOn="{StaticResource ButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Padding" Value="6,3,6,3"/>
    </Style>

    <Style BasedOn="{StaticResource TextBoxStyle}" TargetType="{x:Type TextBox}">
        <Setter Property="Margin" Value="2"/>
    </Style>

    <Style BasedOn="{StaticResource PasswordBoxStyle}" TargetType="{x:Type PasswordBox}">
        <Setter Property="Margin" Value="2"/>
    </Style>

    <Converters:PostedTimeTypeToColourConverter x:Key="PostedTimeTypeToColourConverter"/>    

    <Style TargetType="{x:Type Controls:DoubleCollectionModelControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:DoubleCollectionModelControl}">
                    <ControlTemplate.Resources>
                        <Style x:Key="Statistic" TargetType="{x:Type ContentControl}">
                            <Setter Property="HorizontalAlignment" Value="Right"/>
                        </Style>
                    </ControlTemplate.Resources>
                    <Expander HorizontalAlignment="Stretch">
                        <Expander.Header>
                            <DockPanel HorizontalAlignment="{Binding HorizontalAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Mode=OneWayToSource}">
                                <TextBlock DockPanel.Dock="Left" Text="{TemplateBinding Title}"/>
                                <ContentControl DockPanel.Dock="Right" Content="{Binding Path=Current}" ContentStringFormat="{TemplateBinding StringFormat}" Style="{StaticResource Statistic}" Margin="0,0,5,0"/>
                            </DockPanel>
                        </Expander.Header>
                        <Expander.Content>
                            <Grid Margin="4,2,4,3">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <TextBlock Grid.Column="0" Grid.Row="0" Text="Min"/>
                                <ContentControl Grid.Column="1" Grid.Row="0" Content="{Binding Path=Minimum}" ContentStringFormat="{TemplateBinding StringFormat}" Style="{StaticResource Statistic}"/>
                                <TextBlock Grid.Column="0" Grid.Row="1" Text="Max"/>
                                <ContentControl Grid.Column="1" Grid.Row="1" Content="{Binding Path=Maximum}" ContentStringFormat="{TemplateBinding StringFormat}" Style="{StaticResource Statistic}"/>
                                <TextBlock Grid.Column="0" Grid.Row="2" Text="Mean"/>
                                <ContentControl Grid.Column="1" Grid.Row="2" Content="{Binding Path=Mean}" ContentStringFormat="{TemplateBinding StringFormat}" Style="{StaticResource Statistic}"/>
                                <TextBlock Grid.Column="0" Grid.Row="3" Text="Range"/>
                                <ContentControl Grid.Column="1" Grid.Row="3" Content="{Binding Path=Range}" ContentStringFormat="{TemplateBinding StringFormat}" Style="{StaticResource Statistic}"/>
                                <TextBlock Grid.Column="0" Grid.Row="4" Text="Std. Deviation"/>
                                <ContentControl Grid.Column="1" Grid.Row="4" Content="{Binding Path=StandardDeviation}" ContentStringFormat="{TemplateBinding StringFormat}" Style="{StaticResource Statistic}"/>
                                <TextBlock Grid.Column="0" Grid.Row="5" Text="Collection Size"/>
                                <ContentControl Grid.Column="1" Grid.Row="5" Content="{Binding Path=Count}" Style="{StaticResource Statistic}"/>
                            </Grid>
                        </Expander.Content>
                    </Expander>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Controls:TimingGrid}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:TimingGrid}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Controls:PostedTimeCollectionModelControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:PostedTimeCollectionModelControl}">
                    <ControlTemplate.Resources>
                        <Style x:Key="Statistic" TargetType="{x:Type ContentControl}">
                            <Setter Property="HorizontalAlignment" Value="Right"/>
                        </Style>
                    </ControlTemplate.Resources>
                    <Expander HorizontalAlignment="Stretch">
                        <Expander.Header>
                            <DockPanel HorizontalAlignment="{Binding HorizontalAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Mode=OneWayToSource}">
                                <TextBlock DockPanel.Dock="Left" Text="{TemplateBinding Title}"/>
                                <ContentControl DockPanel.Dock="Right" Content="{Binding Path=Current.Time}" Style="{StaticResource Statistic}" Margin="0,0,5,0"/>
                            </DockPanel>
                        </Expander.Header>
                        <Expander.Content>
                            <Grid Margin="4,2,4,3">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <TextBlock Grid.Column="0" Grid.Row="0" Text="Min"/>
                                <ContentControl Grid.Column="1" Grid.Row="0" Content="{Binding Path=Minimum}" Style="{StaticResource Statistic}"/>
                                <TextBlock Grid.Column="0" Grid.Row="1" Text="Max"/>
                                <ContentControl Grid.Column="1" Grid.Row="1" Content="{Binding Path=Maximum}" Style="{StaticResource Statistic}"/>
                                <TextBlock Grid.Column="0" Grid.Row="2" Text="Mean"/>
                                <ContentControl Grid.Column="1" Grid.Row="2" Content="{Binding Path=Mean}" Style="{StaticResource Statistic}"/>
                                <TextBlock Grid.Column="0" Grid.Row="3" Text="Range"/>
                                <ContentControl Grid.Column="1" Grid.Row="3" Content="{Binding Path=Range}" Style="{StaticResource Statistic}"/>
                                <TextBlock Grid.Column="0" Grid.Row="4" Text="Collection Size"/>
                                <ContentControl Grid.Column="1" Grid.Row="4" Content="{Binding Path=Count}" Style="{StaticResource Statistic}"/>
                            </Grid>
                        </Expander.Content>
                    </Expander>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Converters:DriverStatusConverter x:Key="DriverStatusConverter"/>
    <Converters:GridColumnColourConverter x:Key="GridColumnColourConverter"/>
    <Converters:LapTimeConverter x:Key="LapTimeConverter"/>
    <Converters:LapTimeDeltaConverter x:Key="LapTimeDeltaConverter"/>
    <Converters:SectorTimeConverter x:Key="SectorTimeConverter"/>
    <Converters:SectorTimeDeltaConverter x:Key="SectorTimeDeltaConverter"/>
    <Converters:LapNumberConverter x:Key="LapNumberConverter"/>
    <Converters:PositionConverter x:Key="PositionConverter"/>
    
    <Converters:SessionStatusConverter x:Key="SessionStatusConverter"/>
    <Converters:SessionStatusToColourConverter x:Key="SessionStatusToColourConverter"/>



    <Style TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
        <Setter Property="Background" Value="{StaticResource NormalBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="Margin" Value="0,0,0,4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <Grid>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeftAlignedHeader" BasedOn="{StaticResource {x:Type GridViewColumnHeader}}" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Margin" Value="6,0,0,4"/>
    </Style>

    <Style x:Key="PitLapHeader" BasedOn="{StaticResource LeftAlignedHeader}" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Width" Value="18"/>
    </Style>

    <Style x:Key="SectorHeader" BasedOn="{StaticResource {x:Type GridViewColumnHeader}}" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Width" Value="31"/>
    </Style>

    <Style TargetType="{x:Type ListViewItem}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource ListViewItemFocusVisual}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.100" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.400" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.100" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.400" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocussedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.100" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocussedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" SnapsToDevicePixels="true">
                        <Grid>
                            <Rectangle x:Name="HoverRectangle" Fill="{StaticResource NormalBrush}" IsHitTestVisible="False" Opacity="0" RadiusX="1" RadiusY="1"/>
                            <Rectangle x:Name="SelectedRectangle" Fill="{StaticResource NormalBrush}" IsHitTestVisible="False" Opacity="0" RadiusX="1" RadiusY="1"/>
                            <GridViewRowPresenter VerticalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="SelectedOn_BeginStoryboard" Storyboard="{StaticResource SelectedOn}"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </MultiTrigger.ExitActions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="Selector.IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="Selector.IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Selector.IsSelected" Value="True">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource BlackColor}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="StandardColumn" TargetType="{x:Type Control}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <TextBlock Margin="-5,0,-6,0" Foreground="{Binding Path=TextColour, Converter={StaticResource GridColumnColourConverter}}" Text="{Binding Path=Text}" TextAlignment="Right"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeftAlignedColumn" TargetType="{x:Type Control}">
        <Setter Property="Margin" Value="0,0,-6,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <TextBlock Margin="{TemplateBinding Margin}" Foreground="{Binding Path=TextColour, Converter={StaticResource GridColumnColourConverter}}" Text="{Binding Path=Text}" TextAlignment="Left"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PitLapColumn" BasedOn="{StaticResource LeftAlignedColumn}" TargetType="{x:Type Control}">
        <Setter Property="Margin" Value="-2,0,-6,0"/>
    </Style>

    <Style x:Key="GridSessionText" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>

</ResourceDictionary>