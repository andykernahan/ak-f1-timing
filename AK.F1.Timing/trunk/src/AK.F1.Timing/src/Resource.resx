<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgEmptyString" xml:space="preserve">
    <value>Expected non-empty string.</value>
  </data>
  <data name="ArgNonEmptyCollection" xml:space="preserve">
    <value>Expected non-empty collection.</value>
  </data>
  <data name="DecoratedObjectReader_InvalidObjectTypeCode" xml:space="preserve">
    <value>Unable to deserialize the next object as the object type code is invalid ('{0}').</value>
  </data>
  <data name="DecoratedObjectReader_PropertyMissing" xml:space="preserve">
    <value>Unable to deserailize the next object as no property with an identifier of '{0}' was found on type '{1}'.</value>
  </data>
  <data name="DecoratedObjectReader_UnexpectedEndOfStream" xml:space="preserve">
    <value>Unable to deserialize the next object as the end of the serialization stream was unexpectedly reached.</value>
  </data>
  <data name="LapGap_InvalidCompareToArgument" xml:space="preserve">
    <value>Cannot compare a '{0}' instance to an instance of '{1}'.</value>
  </data>
  <data name="LiveData_UnableToConvertToDriverStatus" xml:space="preserve">
    <value>Unable parse the next driver status message as the driver status value specified in the message ('{0}') is invalid.</value>
  </data>
  <data name="LiveData_UnableToConvertToGridColumn" xml:space="preserve">
    <value>Unable to parse the next live-timing message as the grid column index '{0}' could not be converted to a GridColumn given the current session ('{1}').</value>
  </data>
  <data name="LiveData_UnableToConvertToGridColumnColour" xml:space="preserve">
    <value>Unable to parse the next live-timing message as the grid column colour value specified in the message ('{0}') is invalid.</value>
  </data>
  <data name="LiveData_UnableToConvertToPostedTimeType" xml:space="preserve">
    <value>Unable to parse the next live-timing message as the posted time type value specified in the message ('{0}') is invalid.</value>
  </data>
  <data name="LiveData_UnableToConvertToSessionStatus" xml:space="preserve">
    <value>Unable parse the next race status message as the race status value specified in the message ('{0}') is invalid.</value>
  </data>
  <data name="LiveData_UnableToConvertToSessionType" xml:space="preserve">
    <value>Unable to parse the next this type message as the session type value specified in the message ('{0}') is invalid.</value>
  </data>
  <data name="LiveData_UnableToParseDouble" xml:space="preserve">
    <value>Unable to parse the next live-timing message as it contains an incorrectly formatted Double string ('{0}').</value>
  </data>
  <data name="LiveData_UnableToParseInt32" xml:space="preserve">
    <value>Unable to parse the next live-timing message as it contains an incorrectly formatted Int32 string ('{0}').</value>
  </data>
  <data name="LiveData_UnableToParseTime" xml:space="preserve">
    <value>Unable to parse the next live-timing message as the time value specified in the message ('{0}') is invalid.</value>
  </data>
  <data name="LiveDecryptorFactory_CredentialsRejected" xml:space="preserve">
    <value>The supplied credentials have been rejected by the live-timing server.</value>
  </data>
  <data name="LiveDecryptorFactory_FailedToFetchAuthToken" xml:space="preserve">
    <value>Failed to fetch the initial authentication token from the live-timing servers: '{0}'</value>
  </data>
  <data name="LiveDecryptorFactory_FailedToFetchSessionSeed" xml:space="preserve">
    <value>Failed to fetch the session decryption seed from the live-timing servers: '{0}'</value>
  </data>
  <data name="LiveDecryptorFactory_UnableToParseSeed" xml:space="preserve">
    <value>Unable to parse decryption seed from '{0}'.</value>
  </data>
  <data name="LiveMessageReader_MessageClassification_Driver" xml:space="preserve">
    <value>Driver</value>
  </data>
  <data name="LiveMessageReader_MessageClassification_System" xml:space="preserve">
    <value>System</value>
  </data>
  <data name="LiveMessageReader_MessageClassification_Weather" xml:space="preserve">
    <value>Weather</value>
  </data>
  <data name="LiveMessageReader_UnexpectedEndOfStream" xml:space="preserve">
    <value>Unable to read the next live-timing message as the end of the message stream was unexpectedly reached.</value>
  </data>
  <data name="LiveMessageReader_UnexpectedFirstMessage" xml:space="preserve">
    <value>Unable to read any live-timing messages from the stream as the first expected message was not an update keyframe message. The first message encountered was '{0}'.</value>
  </data>
  <data name="LiveMessageReader_UnsupportedMessage" xml:space="preserve">
    <value>Unable to read the next live-timing message as it is not supported.
Message Header: '{0}'
Message Classification: '{1}'</value>
  </data>
  <data name="LiveMessageStreamEndpoint_FailedToOpenKeyframe" xml:space="preserve">
    <value>Failed to download a keyframe from the live-timing servers: '{0}'</value>
  </data>
  <data name="LiveMessageStreamEndpoint_FailedToOpenStream" xml:space="preserve">
    <value>Failed to open a connection with the live-timing servers: '{0}'</value>
  </data>
  <data name="LiveMessageStreamEndpoint_FailedToResolveStreamHost" xml:space="preserve">
    <value>Unable to open a connection with the live-timing servers as the '{0}' hostname failed to resolve.</value>
  </data>
  <data name="MessageReader_InvalidMessage" xml:space="preserve">
    <value>The format of the next timing message is invalid.</value>
  </data>
  <data name="PostedTime_InvalidCompareToArgument" xml:space="preserve">
    <value>Cannot compare a '{0}' instance to an instance of '{1}'.</value>
  </data>
  <data name="PropertyDescriptor_PropertyHaveGetAndSetMethod" xml:space="preserve">
    <value>The '{0}' type cannot be serialized as the '{1}' property does not have both a get and set method. Note that either method can be private but they must be defined.</value>
  </data>
  <data name="PropertyDescriptor_PropertyIsNotDecorated" xml:space="preserve">
    <value>The '{0}' type cannot be serialized as the '{1}' property is not decorated with the '{2}' attribute.</value>
  </data>
  <data name="TimeGap_InvalidCompareToArgument" xml:space="preserve">
    <value>Cannot compare a {0} instance to an instance of {1}.</value>
  </data>
  <data name="TypeDescriptor_DuplicateProperty" xml:space="preserve">
    <value>The '{0}' type already has a property with an identifier of '{1}'.</value>
  </data>
  <data name="TypeDescriptor_DuplicateTypeId" xml:space="preserve">
    <value>A descriptor already exists with an Id of '{0}' for type '{1}' and type '{2}' has been decorated with the same Id.</value>
  </data>
  <data name="TypeDescriptor_NoDescriptorWithTypeId" xml:space="preserve">
    <value>Unable to deserialize the next object as no type descriptor could be located for type '{0}'.</value>
  </data>
  <data name="TypeDescriptor_TypeIsNotDecorated" xml:space="preserve">
    <value>The '{0}' type cannot be serialized as it is not decorated with the '{1}' attribute.</value>
  </data>
</root>