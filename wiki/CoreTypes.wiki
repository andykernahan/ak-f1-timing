#summary A description of the core exported types
#labels Featured

The API exported by the core library is relatively small and has only a few core concepts and this section provides an overview.

==Message==

The abstract base class for all live-timing messages. Messages implement the [http://en.wikipedia.org/wiki/Visitor_pattern vistor pattern] allowing them to be easily processed.

==IMessageVisitor==

The other half of the [http://en.wikipedia.org/wiki/Visitor_pattern vistor pattern]. The `MessageVisitorBase` type provides an abstract implementation where all `Visit` methods are virtual and no-ops.

==IMessageReader==

Defines the functionality required to read messages from an underlying data stream. The core library provides three implementations:

|| Type || Description ||
|| `LiveMessageReader` || Reads messages generated by the live-timing service. ||
|| `RecordingMessageReader` || An `IMessageReader` decorator which serializes the messages read from an inner `IMessageReader`. Delays between messages are automatically serialized enabling sessions to be replayed later in real-time.||
|| `RecordedMessageReader` || Reads messages which have been serialized by a `RecordingMessageReader`. Message delays are automatically processed, putting the current thread to sleep to simulate the delay. This enables sessions to be replayed in real-time.||

==F1Timing==

Provides utility methods for creating message readers, both live and recorded. The usage of this type is covered in the [ExampleUsage examples].