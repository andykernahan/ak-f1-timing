#summary Home page for F1 Live-Timing for .NET
#labels Featured

=F1 Live-Timing for .NET=

This project provides a comprehensive library for reading messages generated by the official F1 live-timing [http://www.formula1.com/live_timing/ feed].

=Overview=

During each session of a race weekend the live-timing feed generates a stream of messages. Each message usually corresponds to an event that has taken place during the session, such as the track temperature increasing or a driver completing a lap, whilst other messages relate to the status of the session and feed. In all, messages fall into five categories:

|| *Category* || *Description* ||
|| Driver || Messages which relate to a single driver in the session, such as the driverâ€™s position, lap time, sector times and status. ||
|| Feed || Messages which relate to the current status of the live-timing feed, such as keyframe number, validity and system messages. ||
|| Grid || Messages which update the timing grid, such as setting the value and colour of a column or clearing a row.  ||
|| Session || Message which relate to the current session, such as the session type, status and remaining time. ||
|| Weather || Messages which relate to the current climatic conditions, such as track / air temperate, humidity, atmospheric pressure, wind speed and direction. ||

The core library provided by this project allows you to easily read and consume these messages.

*Note* that order to login to the live-timing feed you *must* have a valid username and password. You can register [http://www.formula1.com/live_timing/ here].

=Example Usage=

The example below shows how to log into the live-timing feed, create a message read and read all messages until the end of the stream is reached.

{{{
Message message;
// Log into the service.
AuthenticationToken token = F1Timing.Live.Login("your-username", "your-password");
// Create a message reader using the issued token.
using(IMessageReader reader = F1Timing.Live.Read(token)) {
    // Read all messages until the end of the stream is reached (indicated by a null message)
    while((message = reader.Read()) != null) {
        // Do something with the message.
        Console.WriteLine(message);
    }
}
}}}

=Core Types=

==Message==

The abstract base class for all live-timing messages. Messages implement the [http://en.wikipedia.org/wiki/Visitor_pattern vistor pattern] allowing them to be easily processed.

==IMessageVisitor==

The other half of the [http://en.wikipedia.org/wiki/Visitor_pattern vistor pattern]. The `MessageVisitor` class provides an empty implementation.

==IMessageReader==

Defines the functionality required to read messages from an underlying data stream. Three implementation are provided by the core library:

|| Type || Description ||
|| `LiveMessageReader` || Reads messages generated by the live-timing service. ||
|| `RecordingMessageReader` || An `IMessageReader` decorator which serializes the messages read from an inner `IMessageReader`. Delays between messages are automatically serialized enabling sessions to be replayed in real-time.||
|| `RecordedMessageReader` || Reads messages which have been serialized by a `RecordingMessageReader`. Message delays are automatically processed, putting the current thread to sleep to simulate the delay. This enabled sessions to be replayed in real-time.||